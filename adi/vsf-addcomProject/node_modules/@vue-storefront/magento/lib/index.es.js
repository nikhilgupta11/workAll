import { Logger, sharedRef, configureFactoryParams, useShippingProviderFactory, useBillingFactory, useCategoryFactory, useFacetFactory, useForgotPasswordFactory, useMakeOrderFactory, useUserFactory, useProductFactory, useShippingFactory, useUserBillingFactory, useUserOrderFactory, useUserShippingFactory, track } from '@vue-storefront/core';
import { computed } from '@vue/composition-api';

const countriesList = (countries) => countries
    .filter((c) => c.id && c.full_name_english && c.full_name_locale)
    .map((c) => ({
    id: c.id,
    label: c.full_name_locale,
    englishLabel: c.full_name_english,
    abbreviation: c.two_letter_abbreviation,
}))
    .sort((a, b) => a.label.localeCompare(b.label));
const regionList = (country) => ((country === null || country === void 0 ? void 0 : country.available_regions) ? country.available_regions
    .filter((c) => c.id && c.code && c.name)
    .map((c) => ({
    id: c.id,
    label: c.name,
    abbreviation: c.code,
}))
    .sort((a, b) => a.label.localeCompare(b.label)) : []);
var addressGetter = {
    countriesList,
    regionList,
};

function htmlDecode(input) {
    const formatName = () => {
        try {
            const domParser = new DOMParser();
            const doc = domParser.parseFromString(input, 'text/html');
            return doc.documentElement.textContent;
        }
        catch {
            return input;
        }
    };
    const name = formatName();
    return name === 'undefined' ? '' : name;
}

const buildCategoryTree = (rootCategory, currentCategory, withProducts = false) => {
    const hasChildren = Array.isArray(rootCategory.children) && rootCategory.children.length > 0;
    const isCurrent = rootCategory.uid === currentCategory;
    const label = htmlDecode(rootCategory.name);
    const slug = `/${rootCategory.url_path}${rootCategory.url_suffix || ''}`;
    const childrenUid = hasChildren
        ? rootCategory
            .children
            .reduce((acc, curr) => [...acc, curr.uid], [])
        : [];
    const childProductCount = hasChildren
        ? rootCategory
            .children
            .reduce((acc, curr) => acc + curr.product_count, 0)
        : 0;
    const items = hasChildren
        ? rootCategory
            .children
            .filter((c) => (withProducts ? c.product_count > 0 : true))
            .map((c) => buildCategoryTree(c, currentCategory))
        : [];
    return {
        label,
        slug,
        uid: [rootCategory.uid, ...childrenUid],
        items: items.filter((c) => c.count > 0),
        count: childProductCount || rootCategory.product_count,
        isCurrent,
    };
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getTree = (category) => {
    if (!category) {
        return null;
    }
    return buildCategoryTree(category, '');
};
const getCategoryTree$1 = (category, currentCategory = '', withProducts = false) => (category
    ? buildCategoryTree(category, currentCategory, withProducts)
    : null);
const getCategoryBreadcrumbs = (category) => {
    let breadcrumbs = [];
    if (!category) {
        return [];
    }
    if (Array.isArray(category === null || category === void 0 ? void 0 : category.breadcrumbs)) {
        breadcrumbs = category.breadcrumbs.map((breadcrumb) => ({
            text: breadcrumb.category_name,
            link: `/c/${breadcrumb.category_url_path}${category.url_suffix || ''}`,
        }));
    }
    breadcrumbs.push({
        text: category.name,
        link: `/c/${category.url_path}${category.url_suffix || ''}`,
    });
    return breadcrumbs;
};
const categoryGetters = {
    getTree,
    getBreadcrumbs: getCategoryBreadcrumbs,
    getCategoryTree: getCategoryTree$1,
};
var categoryGetters$1 = categoryGetters;

const getItems$4 = (review) => { var _a; return ((_a = review === null || review === void 0 ? void 0 : review.reviews) === null || _a === void 0 ? void 0 : _a.items) || []; };
const getReviewId = (item) => `${item.nickname}_${item.created_at}_${item.average_rating}`;
const getReviewAuthor = (item) => item.nickname;
const getReviewMessage = (item) => item.text;
const getReviewRating = (item) => {
    var _a;
    return Number.parseInt((_a = item.ratings_breakdown.find((r) => r.name === 'Rating')) === null || _a === void 0 ? void 0 : _a.value, 10) || 0;
};
const getReviewDate = (item) => item.created_at;
const getTotalReviews$1 = (review) => (review === null || review === void 0 ? void 0 : review.review_count) || 0;
const getAverageRating$1 = (review) => { var _a, _b; return ((_b = (_a = review === null || review === void 0 ? void 0 : review.reviews) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.reduce((acc, curr) => Number.parseInt(`${acc}`, 10) + getReviewRating(curr), 0)) / ((review === null || review === void 0 ? void 0 : review.review_count) || 1) || 0; };
const getRatesCount = (_review) => [];
const getReviewsPage = (review) => { var _a; return ((_a = review === null || review === void 0 ? void 0 : review.reviews.page_info) === null || _a === void 0 ? void 0 : _a.page_size) || 0; };
const getReviewMetadata = (reviewData) => reviewData === null || reviewData === void 0 ? void 0 : reviewData.map((m) => ({
    ...m,
    values: m.values.map((v) => ({
        label: (Number.parseInt(v.value, 10) || v.value),
        id: v.value_id,
    })),
}));
const getProductName = (review) => { var _a; return ((_a = review === null || review === void 0 ? void 0 : review.product) === null || _a === void 0 ? void 0 : _a.name) || ''; };
const reviewGetters = {
    getAverageRating: getAverageRating$1,
    getItems: getItems$4,
    getRatesCount,
    getReviewAuthor,
    getReviewDate,
    getReviewId,
    getReviewMessage,
    getReviewMetadata,
    getReviewRating,
    getReviewsPage,
    getTotalReviews: getTotalReviews$1,
    getProductName,
};
var reviewGetters$1 = reviewGetters;

const getName$1 = (product) => {
    if (!product) {
        return '';
    }
    return htmlDecode(product.name);
};
const getSlug$1 = (product, category) => {
    const rewrites = product === null || product === void 0 ? void 0 : product.url_rewrites;
    let url = (product === null || product === void 0 ? void 0 : product.sku) ? `/p/${product.sku}` : '';
    if (!rewrites || rewrites.length === 0) {
        return url;
    }
    url = `/${rewrites[0].url}`;
    // eslint-disable-next-line no-restricted-syntax
    for (const rewrite of rewrites) {
        if (category && category.uid) {
            url = `/${rewrite.url}`;
            break;
        }
    }
    return url;
};
const getPrice$1 = (product) => {
    let regular = 0;
    let special = null;
    if (product === null || product === void 0 ? void 0 : product.price_range) {
        regular = product.price_range.minimum_price.regular_price.value;
        const final = product.price_range.minimum_price.final_price.value;
        if (final < regular) {
            special = final;
        }
    }
    return {
        regular,
        special,
    };
};
const getGallery = (product) => {
    var _a, _b;
    const images = [];
    if (!(product === null || product === void 0 ? void 0 : product.media_gallery) && !((_a = product === null || product === void 0 ? void 0 : product.configurable_product_options_selection) === null || _a === void 0 ? void 0 : _a.media_gallery)) {
        return images;
    }
    const selectedGallery = ((_b = product.configurable_product_options_selection) === null || _b === void 0 ? void 0 : _b.media_gallery)
        ? product.configurable_product_options_selection.media_gallery
        : product.media_gallery;
    // eslint-disable-next-line no-restricted-syntax
    for (const galleryItem of selectedGallery) {
        images.push({
            small: galleryItem.url,
            normal: galleryItem.url,
            big: galleryItem.url,
        });
    }
    return images;
};
const getCoverImage = (product) => {
    if (!product || !product.image) {
        return null;
    }
    return product.image.url;
};
const getProductThumbnailImage = (product) => {
    if (!product || !product.thumbnail) {
        return null;
    }
    return product.thumbnail.url;
};
const getFiltered = (products, filters = {}) => {
    if (!products) {
        return [];
    }
    return products;
};
const getAttributes = (products, _filterByAttributeName) => {
    if (!products || !(products === null || products === void 0 ? void 0 : products.configurable_options)) {
        return {};
    }
    const attributes = {};
    const configurableOptions = products.configurable_options;
    // eslint-disable-next-line no-restricted-syntax
    for (const option of configurableOptions) {
        attributes[option.attribute_code] = {
            name: option.attribute_code,
            label: option.label,
            value: option.values.map((value) => {
                const obj = {};
                obj[value.value_index] = value.label;
                return obj;
            }),
        };
    }
    return attributes;
};
const getDescription = (product) => {
    if (!product || !(product === null || product === void 0 ? void 0 : product.description)) {
        return '';
    }
    return product.description.html;
};
const getShortDescription = (product) => {
    if (!product || !product.short_description) {
        return '';
    }
    return product.short_description.html;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCategoryIds = (product) => {
    const categoryIds = [];
    if (!(product === null || product === void 0 ? void 0 : product.categories)) {
        return categoryIds;
    }
    return product.categories.map((category) => category.uid);
};
const getCategory = (product, currentUrlPath) => {
    if (!(product === null || product === void 0 ? void 0 : product.categories) || (product === null || product === void 0 ? void 0 : product.categories.length) === 0) {
        return null;
    }
    const categories = currentUrlPath.split('/');
    categories.pop();
    if (categories.length === 0) {
        return null;
    }
    const categoryPath = categories.join('/');
    // eslint-disable-next-line no-restricted-syntax
    for (const category of product.categories) {
        if (`/${category.url_path}` === categoryPath) {
            return category;
        }
    }
    return null;
};
const getId$1 = (product) => product.uid;
const getProductSku = (product) => product.sku;
// @ts-ignore
// eslint-disable-next-line no-underscore-dangle
const getTypeId = (product) => product.__typename;
const getFormattedPrice$4 = (price) => {
    if (price === null) {
        return null;
    }
    // TODO get correct data from api
    const locale = 'en';
    const country = 'en';
    const currency = 'USD';
    return new Intl.NumberFormat(`${locale}-${country}`, {
        style: 'currency',
        currency,
    }).format(price);
};
const getBreadcrumbs$1 = (product, category) => {
    let breadcrumbs = [];
    if (!product) {
        return breadcrumbs;
    }
    if (category) {
        breadcrumbs = categoryGetters$1.getBreadcrumbs(category);
    }
    breadcrumbs.push({
        text: getName$1(product),
        route: {
            path: getSlug$1(product),
        },
    });
    return breadcrumbs;
};
const { getTotalReviews } = reviewGetters$1;
const { getAverageRating } = reviewGetters$1;
const getProductRelatedProduct = (product) => (product === null || product === void 0 ? void 0 : product.related_products) || [];
const getProductUpsellProduct = (product) => (product === null || product === void 0 ? void 0 : product.upsell_products) || [];
const getSwatchData = (swatchData) => swatchData === null || swatchData === void 0 ? void 0 : swatchData.value;
const sortProduct = (a, b) => a.position - b.position;
// eslint-disable-next-line no-underscore-dangle
const getGroupedProducts = (product) => { var _a; return product.__typename === 'GroupedProduct' && ((_a = product === null || product === void 0 ? void 0 : product.items) === null || _a === void 0 ? void 0 : _a.sort(sortProduct)); };
// eslint-disable-next-line no-underscore-dangle
const getBundleProducts = (product) => { var _a; return product.__typename === 'BundleProduct' && ((_a = product === null || product === void 0 ? void 0 : product.items) === null || _a === void 0 ? void 0 : _a.sort(sortProduct)); };
const productGetters = {
    getAttributes,
    getAverageRating,
    getBreadcrumbs: getBreadcrumbs$1,
    getCategory,
    getCategoryIds,
    getCoverImage,
    getDescription,
    getFiltered,
    getFormattedPrice: getFormattedPrice$4,
    getGallery,
    getId: getId$1,
    getName: getName$1,
    getPrice: getPrice$1,
    getProductRelatedProduct,
    getProductSku,
    getProductThumbnailImage,
    getProductUpsellProduct,
    getShortDescription,
    getSlug: getSlug$1,
    getTotalReviews,
    getTypeId,
    getSwatchData,
    getGroupedProducts,
    getBundleProducts,
};
var productGetters$1 = productGetters;

const getItems$3 = (cart) => {
    if (!cart || !cart.items) {
        return [];
    }
    return cart.items;
};
const getItemName$2 = (product) => productGetters$1.getName(product.product);
const getSlug = (product) => productGetters$1.getSlug(product.product);
const getItemImage$1 = (product) => productGetters$1.getProductThumbnailImage(product.product);
const getItemPrice$2 = (product) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    if (!product || !product.prices) {
        return {
            regular: 0,
            special: 0,
        };
    }
    if (product.prices) {
        return {
            regular: product.prices.row_total.value || 0,
            special: product.prices.total_item_discount.value || 0,
        };
    }
    const regularPrice = (_d = (_c = (_b = (_a = product.product) === null || _a === void 0 ? void 0 : _a.price_range) === null || _b === void 0 ? void 0 : _b.minimum_price) === null || _c === void 0 ? void 0 : _c.regular_price) === null || _d === void 0 ? void 0 : _d.value;
    const specialPrice = (_h = (_g = (_f = (_e = product.product) === null || _e === void 0 ? void 0 : _e.price_range) === null || _f === void 0 ? void 0 : _f.minimum_price) === null || _g === void 0 ? void 0 : _g.final_price) === null || _h === void 0 ? void 0 : _h.value;
    return {
        regular: regularPrice || 0,
        special: specialPrice || 0,
        // @ts-ignore
        credit: Math.round(specialPrice / 10),
        // @TODO: Who set this installment value?
        installment: Math.round((specialPrice * 1.1046) / 10),
        discountPercentage: 100 - Math.round((specialPrice / regularPrice) * 100),
        total: (_k = (_j = product.prices) === null || _j === void 0 ? void 0 : _j.row_total) === null || _k === void 0 ? void 0 : _k.value,
    };
};
const productHasSpecialPrice = (product) => getItemPrice$2(product).regular < getItemPrice$2(product).special;
const getItemQty$2 = (product) => product.quantity;
const getItemAttributes$1 = ({ product }, _filterByAttributeName) => {
    const attributes = {};
    if (!product || !product.configurable_options) {
        return attributes;
    }
    const configurableOptions = product.configurable_options;
    // eslint-disable-next-line no-restricted-syntax
    for (const option of configurableOptions) {
        attributes[option.attribute_code] = {
            name: option.attribute_code,
            label: option.label,
            value: option.values.map((value) => {
                const obj = {};
                obj[value.value_index] = value.label;
                return obj;
            }),
        };
    }
    return attributes;
};
const getItemSku$2 = (product) => { var _a; return ((_a = product === null || product === void 0 ? void 0 : product.product) === null || _a === void 0 ? void 0 : _a.sku) || ''; };
const calculateDiscounts = (discounts) => discounts.reduce((a, b) => Number.parseFloat(`${a}`) + Number.parseFloat(`${b.amount.value}`), 0);
const getTotals$1 = (cart) => {
    if (!cart || !cart.prices)
        return {};
    const subtotal = cart.prices.subtotal_including_tax.value;
    return {
        total: cart.prices.grand_total.value,
        subtotal: cart.prices.subtotal_including_tax.value,
        special: (cart.prices.discounts) ? subtotal - calculateDiscounts(cart.prices.discounts) : subtotal,
    };
};
const getShippingPrice$1 = (cart) => {
    if (!cart.shipping_addresses) {
        return 0;
    }
    return cart.shipping_addresses
        .reduce((acc, shippingAddress) => {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        const { selected_shipping_method } = shippingAddress;
        if (selected_shipping_method) {
            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
            return acc + selected_shipping_method.amount.value;
        }
        return acc;
    }, 0);
};
const getTotalItems$1 = (cart) => {
    if (!cart) {
        return 0;
    }
    return cart.total_quantity;
};
const getConfiguredVariant = (product) => (product === null || product === void 0 ? void 0 : product.configured_variant) || {};
// eslint-disable-next-line import/no-named-as-default-member
const getFormattedPrice$3 = (price) => productGetters$1.getFormattedPrice(price);
const getCoupons = (cart) => (Array.isArray(cart === null || cart === void 0 ? void 0 : cart.applied_coupons) ? cart.applied_coupons.map((c) => ({
    id: c.code,
    name: c.code,
    value: 0,
    code: c.code,
})) : []);
const getDiscounts = (cart) => (Array.isArray(cart === null || cart === void 0 ? void 0 : cart.prices.discounts) ? cart.prices.discounts.map((d) => ({
    id: d.label,
    name: d.label,
    description: '',
    value: d.amount.value,
    code: d.label,
})) : []);
const getAppliedCoupon = (cart) => (Array.isArray(cart === null || cart === void 0 ? void 0 : cart.applied_coupons) && (cart === null || cart === void 0 ? void 0 : cart.applied_coupons.length) > 0 ? {
    id: cart.applied_coupons[0].code,
    name: cart.applied_coupons[0].code,
    value: 0,
    code: cart.applied_coupons[0].code,
} : null);
const getSelectedShippingMethod = (cart) => {
    var _a, _b;
    return (((_a = cart === null || cart === void 0 ? void 0 : cart.shipping_addresses) === null || _a === void 0 ? void 0 : _a.length) > 0
        ? (_b = cart === null || cart === void 0 ? void 0 : cart.shipping_addresses[0]) === null || _b === void 0 ? void 0 : _b.selected_shipping_method
        : null);
};
const getAvailablePaymentMethods = (cart) => cart === null || cart === void 0 ? void 0 : cart.available_payment_methods.map((p) => ({
    label: p.title,
    value: p.code,
}));
const getStockStatus = (product) => product.product.stock_status;
const cartGetters = {
    getAppliedCoupon,
    getAvailablePaymentMethods,
    getCoupons,
    getDiscounts,
    getFormattedPrice: getFormattedPrice$3,
    getItemAttributes: getItemAttributes$1,
    getItemImage: getItemImage$1,
    getItemName: getItemName$2,
    getSlug,
    getItemPrice: getItemPrice$2,
    getItemQty: getItemQty$2,
    getItems: getItems$3,
    getItemSku: getItemSku$2,
    getSelectedShippingMethod,
    getShippingPrice: getShippingPrice$1,
    getTotalItems: getTotalItems$1,
    getTotals: getTotals$1,
    productHasSpecialPrice,
    getStockStatus,
    getConfiguredVariant,
};
var cartGetters$1 = cartGetters;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodId = (shippingMethod) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodName = (shippingMethod) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodDescription = (shippingMethod) => '';
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingMethodPrice = (shippingMethod) => 0;
// eslint-disable-next-line import/no-named-as-default-member
const getFormattedPrice$2 = (price) => productGetters$1.getFormattedPrice(price);
const checkoutGetters = {
    getShippingMethodId,
    getShippingMethodName,
    getShippingMethodDescription,
    getFormattedPrice: getFormattedPrice$2,
    getShippingMethodPrice,
};
var checkoutGetters$1 = checkoutGetters;

const filterFacets = (criteria) => (f) => (criteria ? criteria.includes(f.attribute_code) : true);
const getFacetTypeByCode = (code) => {
    if (code === 'type_of_stones') {
        return 'radio';
    }
    return 'checkbox';
};
const createFacetsFromOptions = (facets, filters, facet) => {
    const options = facet.options || [];
    const selectedList = filters && filters[facet.attribute_code] ? filters[facet.attribute_code] : [];
    return options
        .map(({ label, value, count, }) => ({
        type: getFacetTypeByCode(facet.attribute_code),
        id: label,
        attrName: label,
        value,
        selected: selectedList.includes(value),
        count,
    }));
};
const reduceForFacets = (facets, filters) => (prev, curr) => ([
    ...prev,
    ...createFacetsFromOptions(facets, filters, curr),
]);
const reduceForGroupedFacets = (facets, filters) => (prev, curr) => ([
    ...prev,
    {
        id: curr.attribute_code,
        label: curr.label,
        options: createFacetsFromOptions(facets, filters, curr),
        count: null,
    },
]);
const buildFacets = (searchData, reduceFn, criteria) => {
    if (!searchData.data) {
        return [];
    }
    const { data: { availableFilters: facets }, input: { filters }, } = searchData;
    return facets === null || facets === void 0 ? void 0 : facets.filter(filterFacets(criteria)).reduce(reduceFn(facets, filters), []);
};

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getAll = (searchData, criteria) => buildFacets(searchData, reduceForFacets, criteria);
const getGrouped = (searchData, criteria) => {
    var _a;
    return (_a = buildFacets(searchData, reduceForGroupedFacets, criteria)) === null || _a === void 0 ? void 0 : _a.filter((facet) => facet.options && facet.options.length > 0);
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getSortOptions = (searchData) => {
    if (!searchData || !searchData.data || !searchData.data.availableSortingOptions) {
        return {
            options: [],
            selected: '',
        };
    }
    return {
        options: searchData.data.availableSortingOptions,
        selected: searchData.input.sort,
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getCategoryTree = (searchData) => {
    const buildTree = (category) => ({
        label: category.name,
        slug: category.url_path,
        items: (category.children) ? category.children.map((element) => buildTree(element)) : [],
        isCurrent: (category.name === searchData.data.category.name),
    });
    if (!searchData.data || !searchData.data.category.children) {
        return {};
    }
    return buildTree(searchData.data.category);
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getProducts$1 = (searchData) => {
    if (!searchData || !searchData.data || !searchData.data.items) {
        return [];
    }
    return searchData.data.items;
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getPagination$2 = (searchData) => {
    var _a, _b, _c, _d;
    const totalPages = (searchData === null || searchData === void 0 ? void 0 : searchData.data) ? (Number.isNaN(Math.ceil(searchData.data.total / searchData.input.itemsPerPage))
        ? 1
        : Math.ceil(searchData.data.total / searchData.input.itemsPerPage)) : 1;
    return {
        currentPage: (((_a = searchData === null || searchData === void 0 ? void 0 : searchData.input) === null || _a === void 0 ? void 0 : _a.page) > totalPages ? 1 : (_b = searchData === null || searchData === void 0 ? void 0 : searchData.input) === null || _b === void 0 ? void 0 : _b.page) || 1,
        totalPages,
        totalItems: ((_c = searchData === null || searchData === void 0 ? void 0 : searchData.data) === null || _c === void 0 ? void 0 : _c.total) ? searchData.data.total : 0,
        itemsPerPage: ((_d = searchData === null || searchData === void 0 ? void 0 : searchData.input) === null || _d === void 0 ? void 0 : _d.itemsPerPage) || 10,
        pageOptions: [10, 50, 100],
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getBreadcrumbs = (searchData) => [];
const facetGetters = {
    getSortOptions,
    getGrouped,
    getAll,
    getProducts: getProducts$1,
    getCategoryTree,
    getBreadcrumbs,
    getPagination: getPagination$2,
};
var facetGetters$1 = facetGetters;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getResetPasswordToken(result) {
    return '';
}
const isPasswordChanged = (result) => result === null || result === void 0 ? void 0 : result.resetPassword;
const forgotPasswordGetters = {
    getResetPasswordToken,
    isPasswordChanged,
};
var forgotPasswordGetters$1 = forgotPasswordGetters;

/* istanbul ignore file */
const getDate = (order) => new Date(order === null || order === void 0 ? void 0 : order.created_at).toLocaleDateString() || '';
const getId = (order) => String(Number.parseInt(order === null || order === void 0 ? void 0 : order.order_number, 10) || Math.floor(Math.random() * 100));
const getStatus = (order) => (order === null || order === void 0 ? void 0 : order.status) || 'Failed';
const getPrice = (order) => (order === null || order === void 0 ? void 0 : order.grand_total) || 0;
const getItems$2 = (order) => (order === null || order === void 0 ? void 0 : order.items) || [];
const getItemSku$1 = (item) => (item === null || item === void 0 ? void 0 : item.product_sku) || 0;
const getItemName$1 = (item) => (item === null || item === void 0 ? void 0 : item.product_name) || 0;
const getItemQty$1 = (item) => (item === null || item === void 0 ? void 0 : item.quantity_ordered) || 0;
const getItemPrice$1 = (item) => { var _a; return ((_a = item === null || item === void 0 ? void 0 : item.product_sale_price) === null || _a === void 0 ? void 0 : _a.value) || 0; };
const getFormattedPrice$1 = (price) => String(price);
const getPagination$1 = (orders) => {
    var _a, _b, _c;
    return ({
        currentPage: ((_a = orders === null || orders === void 0 ? void 0 : orders.page_info) === null || _a === void 0 ? void 0 : _a.current_page) || 1,
        totalPages: ((_b = orders === null || orders === void 0 ? void 0 : orders.page_info) === null || _b === void 0 ? void 0 : _b.total_pages) || 1,
        totalItems: (orders === null || orders === void 0 ? void 0 : orders.total_count) || 0,
        itemsPerPage: ((_c = orders === null || orders === void 0 ? void 0 : orders.page_info) === null || _c === void 0 ? void 0 : _c.page_size) || 10,
        pageOptions: [10, 50, 100],
    });
};
const orderGetters = {
    getDate,
    getId,
    getStatus,
    getPrice,
    getItems: getItems$2,
    getItemSku: getItemSku$1,
    getItemName: getItemName$1,
    getItemQty: getItemQty$1,
    getItemPrice: getItemPrice$1,
    getFormattedPrice: getFormattedPrice$1,
    getPagination: getPagination$1,
};
var orderGetters$1 = orderGetters;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
function getItems$1(stores, criteria = {}) {
    return stores;
}
function getSelected(config, store) {
    return config.store_code === store.store_code;
}
const storeGetters = {
    getItems: getItems$1,
    getSelected,
};
var storeGetters$1 = storeGetters;

const transformUserCreateAddressInput = (addressInputParams) => {
    const { apartment, neighborhood, extra, ...address } = addressInputParams.address;
    const street = [address.street];
    if (apartment)
        street.push(apartment);
    if (neighborhood)
        street.push(neighborhood);
    if (extra)
        street.push(extra);
    return {
        ...address,
        street,
    };
};
const transformUserUpdateAddressInput = (addressInputParams) => {
    const { apartment, neighborhood, extra, id, 
    // @ts-ignore
    // eslint-disable-next-line
    extension_attributes, 
    // @ts-ignore
    // eslint-disable-next-line no-underscore-dangle
    __typename: typenameAddress, ...address } = addressInputParams.address;
    const { 
    // @ts-ignore
    // eslint-disable-next-line no-underscore-dangle
    __typename: typenameRegion, ...region } = address.region;
    const street = (Array.isArray(address.street) ? [...address.street] : [address.street]);
    if (apartment)
        street.push(apartment);
    if (neighborhood)
        street.push(neighborhood);
    if (extra)
        street.push(extra);
    const addressParams = {
        ...address,
        region,
        street: street.filter(Boolean),
    };
    return {
        addressId: id,
        input: {
            ...addressParams,
        },
    };
};
const transformUserGetter = (addressInput) => ({
    ...addressInput,
    street: addressInput.street[0],
    apartment: addressInput.street[1],
    neighborhood: addressInput.street[2],
    extra: addressInput.street[3],
});

const userAddressesGetters = {
    getAddresses: (addresses, criteria) => {
        var _a, _b;
        if (!addresses || addresses.length === 0 || !Array.isArray(addresses))
            return [];
        const addressesData = (_b = (_a = addresses === null || addresses === void 0 ? void 0 : addresses.map((a) => transformUserGetter(a))) === null || _a === void 0 ? void 0 : _a.sort((a, b) => ((a.default_shipping === b.default_shipping) ? 0 : (a.default_shipping ? -1 : 1)))) === null || _b === void 0 ? void 0 : _b.sort((a, b) => ((a.default_billing === b.default_billing) ? 0 : (a.default_billing ? -1 : 1)));
        if (!criteria || Object.keys(criteria).length === 0) {
            return addressesData;
        }
        const entries = Object.entries(criteria);
        return addressesData.filter((address) => entries.every(([key, value]) => address[key] === value));
    },
    getDefault: (addresses) => addresses.find(({ isDefault }) => isDefault),
    getTotal: (addresses) => addresses.length,
    getPostCode: (address) => (address === null || address === void 0 ? void 0 : address.postcode) || '',
    getStreetName: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[0] : address === null || address === void 0 ? void 0 : address.street),
    getStreetNumber: (address) => (address === null || address === void 0 ? void 0 : address.streetNumber) || '',
    getCity: (address) => (address === null || address === void 0 ? void 0 : address.city) || '',
    getFirstName: (address) => (address === null || address === void 0 ? void 0 : address.firstname) || '',
    getLastName: (address) => (address === null || address === void 0 ? void 0 : address.lastname) || '',
    getCountry: (address) => (address === null || address === void 0 ? void 0 : address.country_code) || '',
    getPhone: (address) => (address === null || address === void 0 ? void 0 : address.phone) || '',
    getEmail: (address) => (address === null || address === void 0 ? void 0 : address.email) || '',
    getProvince: (address) => { var _a, _b; return (((_a = address === null || address === void 0 ? void 0 : address.region) === null || _a === void 0 ? void 0 : _a.region_code) || ((_b = address === null || address === void 0 ? void 0 : address.region) === null || _b === void 0 ? void 0 : _b.region)) || ''; },
    getCompanyName: (address) => (address === null || address === void 0 ? void 0 : address.company) || '',
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getTaxNumber: (address) => (address === null || address === void 0 ? void 0 : address.vat_id) || '',
    getId: (address) => (address === null || address === void 0 ? void 0 : address.id) || '',
    getApartmentNumber: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[1] : address === null || address === void 0 ? void 0 : address.apartment),
    getNeighborhood: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[2] : address === null || address === void 0 ? void 0 : address.neighborhood),
    getAddressExtra: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[3] : address === null || address === void 0 ? void 0 : address.extra),
    isDefault: (address) => ((address === null || address === void 0 ? void 0 : address.default_shipping) || (address === null || address === void 0 ? void 0 : address.default_billing)) || false,
    isDefaultShipping: (address) => (address === null || address === void 0 ? void 0 : address.default_shipping) || false,
    isDefaultBilling: (address) => (address === null || address === void 0 ? void 0 : address.default_billing) || false,
};
var userAddressesGetters$1 = userAddressesGetters;

const userBillingGetters = {
    getAddresses: (billing, criteria) => {
        if (!criteria || Object.keys(criteria).length === 0) {
            return billing.addresses;
        }
        const entries = Object.entries(criteria);
        return billing.addresses.filter((address) => entries.every(([key, value]) => address[key] === value));
    },
    getDefault: (billing) => billing.addresses.find(({ isDefault }) => isDefault),
    getTotal: (billing) => billing.addresses.length,
    getPostCode: (address) => (address === null || address === void 0 ? void 0 : address.postcode) || '',
    getStreetName: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[0] : ''),
    getStreetNumber: (address) => (address === null || address === void 0 ? void 0 : address.streetNumber) || '',
    getCity: (address) => (address === null || address === void 0 ? void 0 : address.city) || '',
    getFirstName: (address) => (address === null || address === void 0 ? void 0 : address.firstname) || '',
    getLastName: (address) => (address === null || address === void 0 ? void 0 : address.lastname) || '',
    getCountry: (address) => (address === null || address === void 0 ? void 0 : address.country_code) || '',
    getPhone: (address) => (address === null || address === void 0 ? void 0 : address.phone) || '',
    getEmail: (address) => (address === null || address === void 0 ? void 0 : address.email) || '',
    getProvince: (address) => { var _a, _b; return (((_a = address === null || address === void 0 ? void 0 : address.region) === null || _a === void 0 ? void 0 : _a.region_code) || ((_b = address === null || address === void 0 ? void 0 : address.region) === null || _b === void 0 ? void 0 : _b.region)) || ''; },
    getCompanyName: (address) => (address === null || address === void 0 ? void 0 : address.company) || '',
    getNeighborhood: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[2] : address === null || address === void 0 ? void 0 : address.neighborhood),
    getAddressExtra: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[3] : address === null || address === void 0 ? void 0 : address.extra),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getTaxNumber: (address) => address.vat_id || '',
    getId: (address) => (address === null || address === void 0 ? void 0 : address.id) || '',
    getApartmentNumber: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[1] : ''),
    isDefault: (address) => (address === null || address === void 0 ? void 0 : address.default_billing) || false,
};
var userBillingGetters$1 = userBillingGetters;

const getFirstName = (user) => (user ? user.firstname : '');
const getLastName = (user) => (user ? user.lastname : '');
const getEmailAddress = (user) => (user ? user.email : '');
const getFullName = (user) => (user ? `${user.firstname} ${user.lastname}` : '');
const userGetters = {
    getFirstName,
    getLastName,
    getEmailAddress,
    getFullName,
};
var userGetters$1 = userGetters;

const userShippingGetters = {
    getAddresses: (shipping, criteria) => {
        Logger.debug(shipping);
        if (!shipping || !shipping.addresses)
            return [];
        if (!criteria || Object.keys(criteria).length === 0) {
            return shipping.addresses;
        }
        const entries = Object.entries(criteria);
        return shipping.addresses.filter((address) => entries.every(([key, value]) => address[key] === value));
    },
    getDefault: (shipping) => shipping.addresses.find(({ isDefault }) => isDefault),
    getTotal: (shipping) => shipping.addresses.length,
    getPostCode: (address) => (address === null || address === void 0 ? void 0 : address.postcode) || '',
    getStreetName: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[0] : ''),
    getStreetNumber: (address) => (address === null || address === void 0 ? void 0 : address.streetNumber) || '',
    getCity: (address) => (address === null || address === void 0 ? void 0 : address.city) || '',
    getFirstName: (address) => (address === null || address === void 0 ? void 0 : address.firstname) || '',
    getLastName: (address) => (address === null || address === void 0 ? void 0 : address.lastname) || '',
    getCountry: (address) => (address === null || address === void 0 ? void 0 : address.country_code) || '',
    getPhone: (address) => (address === null || address === void 0 ? void 0 : address.phone) || '',
    getEmail: (address) => (address === null || address === void 0 ? void 0 : address.email) || '',
    getProvince: (address) => { var _a, _b; return (((_a = address === null || address === void 0 ? void 0 : address.region) === null || _a === void 0 ? void 0 : _a.region_code) || ((_b = address === null || address === void 0 ? void 0 : address.region) === null || _b === void 0 ? void 0 : _b.region)) || ''; },
    getCompanyName: (address) => (address === null || address === void 0 ? void 0 : address.company) || '',
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getTaxNumber: (address) => '',
    getId: (address) => (address === null || address === void 0 ? void 0 : address.id) || '',
    getApartmentNumber: (address) => (Array.isArray(address === null || address === void 0 ? void 0 : address.street) ? address === null || address === void 0 ? void 0 : address.street[1] : ''),
    isDefault: (address) => (address === null || address === void 0 ? void 0 : address.default_shipping) || false,
};
var userShippingGetters$1 = userShippingGetters;

// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItems = (wishlist) => wishlist.items_v2.items;
const getItemName = (product) => { var _a; return ((_a = product === null || product === void 0 ? void 0 : product.product) === null || _a === void 0 ? void 0 : _a.name) || ''; };
const getItemImage = (product) => { var _a; return ((_a = product === null || product === void 0 ? void 0 : product.product) === null || _a === void 0 ? void 0 : _a.thumbnail.url) || ''; };
const getItemPrice = (product) => {
    var _a, _b, _c;
    let regular = 0;
    let special = null;
    if ((_a = product === null || product === void 0 ? void 0 : product.product) === null || _a === void 0 ? void 0 : _a.price_range) {
        regular = (_b = product === null || product === void 0 ? void 0 : product.product) === null || _b === void 0 ? void 0 : _b.price_range.minimum_price.regular_price.value;
        const final = (_c = product === null || product === void 0 ? void 0 : product.product) === null || _c === void 0 ? void 0 : _c.price_range.minimum_price.final_price.value;
        if (final < regular) {
            special = final;
        }
    }
    return {
        regular,
        special,
    };
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemQty = (product) => product.quantity;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemAttributes = (product, filterByAttributeName) => ({ '': '' });
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getItemSku = (product) => { var _a; return ((_a = product === null || product === void 0 ? void 0 : product.product) === null || _a === void 0 ? void 0 : _a.sku) || ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getTotals = (wishlist) => {
    var _a, _b, _c;
    if (Array.isArray(wishlist)) {
        return (_b = (_a = wishlist[0]) === null || _a === void 0 ? void 0 : _a.items_v2) === null || _b === void 0 ? void 0 : _b.items.reduce((acc, curr) => ({
            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
            total: acc.total + getItemPrice(curr).special,
            // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
            subtotal: acc.subtotal + getItemPrice(curr).regular,
        }), ({ total: 0, subtotal: 0 }));
    }
    return (_c = wishlist === null || wishlist === void 0 ? void 0 : wishlist.items_v2) === null || _c === void 0 ? void 0 : _c.items.reduce((acc, curr) => ({
        total: acc.total + getItemPrice(curr).special,
        subtotal: acc.subtotal + getItemPrice(curr).regular,
    }), ({ total: 0, subtotal: 0 }));
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getShippingPrice = (wishlist) => 0;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getTotalItems = (wishlist) => { var _a; return (Array.isArray(wishlist) ? (_a = wishlist[0]) === null || _a === void 0 ? void 0 : _a.items_count : ((wishlist === null || wishlist === void 0 ? void 0 : wishlist.items_count) || 0)); };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const getFormattedPrice = (price) => '';
const getPagination = (wishlistData) => {
    var _a, _b, _c, _d, _e, _f;
    return ({
        currentPage: ((_b = (_a = wishlistData === null || wishlistData === void 0 ? void 0 : wishlistData.items_v2) === null || _a === void 0 ? void 0 : _a.page_info) === null || _b === void 0 ? void 0 : _b.current_page) || 1,
        totalPages: ((_d = (_c = wishlistData === null || wishlistData === void 0 ? void 0 : wishlistData.items_v2) === null || _c === void 0 ? void 0 : _c.page_info) === null || _d === void 0 ? void 0 : _d.total_pages) || 1,
        totalItems: (wishlistData === null || wishlistData === void 0 ? void 0 : wishlistData.items_count) || 0,
        itemsPerPage: ((_f = (_e = wishlistData === null || wishlistData === void 0 ? void 0 : wishlistData.items_v2) === null || _e === void 0 ? void 0 : _e.page_info) === null || _f === void 0 ? void 0 : _f.page_size) || 10,
        pageOptions: [10, 50, 100],
    });
};
const getProducts = (wishlistData) => {
    var _a;
    if (!wishlistData || (Array.isArray(wishlistData) && wishlistData.length === 0)) {
        return [];
    }
    const reducer = (acc, curr) => {
        var _a;
        return [...acc, ...(_a = curr === null || curr === void 0 ? void 0 : curr.items_v2) === null || _a === void 0 ? void 0 : _a.items.map((item) => ({
                product: item.product,
                quantity: item.quantity,
                added_at: item.added_at,
                id: item.id,
            }))];
    };
    const mapper = (item) => ({
        product: item.product,
        quantity: item.quantity,
        added_at: item.added_at,
        id: item.id,
    });
    return Array.isArray(wishlistData)
        ? wishlistData.reduce((acc, curr) => reducer(acc, curr), [])
        : (_a = wishlistData === null || wishlistData === void 0 ? void 0 : wishlistData.items_v2) === null || _a === void 0 ? void 0 : _a.items.map((e) => mapper(e));
};
const wishlistGetters = {
    getTotals,
    getShippingPrice,
    getItems,
    getItemName,
    getItemImage,
    getItemPrice,
    getItemQty,
    getItemAttributes,
    getItemSku,
    getTotalItems,
    getFormattedPrice,
    getPagination,
    getProducts,
};
var wishlistGetters$1 = wishlistGetters;

const getCode = (config) => config.store_code;
const getTitle = (config) => config.default_title;
const getName = (config) => config.store_name;
const getCurrency = (config) => config.default_display_currency_code;
const getLocale = (config) => config.locale;
const allowGuestProductReview = (config) => config.allow_guests_to_write_product_reviews;
const enabledWishlist = (config) => config.magento_wishlist_general_is_enabled;
const getBaseMediaUrl = (config) => config.base_media_url;
const getLogoSrc = (config) => config.header_logo_src;
const getLogoWidth = (config) => config.logo_width;
const getLogoHeight = (config) => config.logo_height;
const getLogoAlt = (config) => config.logo_alt;
const storeConfigGetters = {
    getCode,
    getTitle,
    getName,
    getCurrency,
    getLocale,
    allowGuestProductReview,
    enabledWishlist,
    getBaseMediaUrl,
    getLogoSrc,
    getLogoWidth,
    getLogoHeight,
    getLogoAlt,
};
var StoreConfigGetters = storeConfigGetters;

const getContextProperty = (object, name) => ((object === null || object === void 0 ? void 0 : object[`$${name}`])
    || (object === null || object === void 0 ? void 0 : object[name]));

const extendScopeContext = (scope, app) => {
    // @ts-ignore
    if (scope.vm) {
        // @ts-ignore
        scope.vm.interceptors = getContextProperty(app, 'interceptors');
        // @ts-ignore
        scope.vm.i18n = getContextProperty(app, 'i18n');
        // @ts-ignore
        scope.vm.routing = getContextProperty(app, 'routing');
        // @ts-ignore
        scope.vm.magento = getContextProperty(app, 'magento');
    }
};

const useAddressesFactory = (factoryParams) => function useAddresses() {
    const loading = sharedRef(false, 'useAddresses-loading');
    const addresses = sharedRef(null, 'useAddresses-shipping');
    const error = sharedRef({
        load: null,
        save: null,
        remove: null,
        update: null,
    }, 'useAddresses-error');
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    const load = async (loadParams) => {
        Logger.debug('useAddresses.load');
        try {
            loading.value = true;
            const addressesInfo = await _factoryParams.load(loadParams);
            error.value.load = null;
            addresses.value = addressesInfo;
        }
        catch (err) {
            error.value.load = err;
            Logger.error('useAddresses/load', err);
        }
        finally {
            loading.value = false;
        }
    };
    const save = async (saveParams) => {
        Logger.debug('useAddresses.save');
        try {
            loading.value = true;
            const addressesInfo = await _factoryParams.save(saveParams);
            error.value.save = null;
            addresses.value = addressesInfo;
        }
        catch (err) {
            error.value.save = err;
            Logger.error('useAddresses/save', err);
        }
        finally {
            loading.value = false;
        }
    };
    const update = async (updateParams) => {
        Logger.debug('useAddresses.update');
        try {
            loading.value = true;
            const addressesInfo = await _factoryParams.update(updateParams);
            error.value.update = null;
            addresses.value = addressesInfo;
        }
        catch (err) {
            error.value.update = err;
            Logger.error('useAddresses.delete', err);
        }
        finally {
            loading.value = false;
        }
    };
    const remove = async (removeParams) => {
        Logger.debug('useAddresses.remove');
        try {
            loading.value = true;
            await _factoryParams.remove(removeParams);
            error.value.remove = null;
        }
        catch (err) {
            error.value.remove = err;
            Logger.error('useAddresses.remove', err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        addresses: computed(() => addresses.value),
        error: computed(() => error.value),
        load,
        loading: computed(() => loading.value),
        remove,
        save,
        update,
    };
};

/* eslint-disable no-param-reassign, consistent-return */
const factoryParams$t = {
    load: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento] load user addresses');
        const { data } = await context.$magento.api.getCustomerAddresses();
        return (_b = (_a = data === null || data === void 0 ? void 0 : data.customer) === null || _a === void 0 ? void 0 : _a.addresses) !== null && _b !== void 0 ? _b : [];
    },
    save: async (context, saveParams) => {
        var _a;
        Logger.debug('[Magento] save user address:', saveParams.address);
        const { data } = await context.$magento.api.createCustomerAddress(transformUserCreateAddressInput(saveParams));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.createCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    remove: async (context, params) => {
        Logger.debug('[Magento] remove user addresses');
        const { data } = await context.$magento.api.deleteCustomerAddress(params.address.id);
        Logger.debug('[Result]:', { data });
        return !!data.deleteCustomerAddress;
    },
    update: async (context, params) => {
        var _a;
        Logger.debug('[Magento] update user addresses', params);
        const { data } = await context.$magento.api.updateCustomerAddress(transformUserUpdateAddressInput(params));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.updateCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
};
var index$g = useAddressesFactory(factoryParams$t);

const useCartFactory = (factoryParams) => function useCart() {
    const loading = sharedRef(false, 'useCart-loading');
    const cart = sharedRef(null, 'useCart-cart');
    const totalQuantity = sharedRef(0, 'useCart-totalQuantity');
    const error = sharedRef({
        addItem: null,
        removeItem: null,
        updateItemQty: null,
        load: null,
        clear: null,
        applyCoupon: null,
        removeCoupon: null,
        loadTotalQty: null,
    }, 'useCart-error');
    // eslint-disable-next-line no-underscore-dangle,@typescript-eslint/naming-convention
    const _factoryParams = configureFactoryParams(factoryParams, {
        mainRef: cart,
        alias: 'currentCart',
        loading,
        error,
    });
    const setCart = (newCart) => {
        cart.value = newCart;
        Logger.debug('useCartFactory.setCart', newCart);
    };
    const addItem = async ({ product, quantity, customQuery, }) => {
        Logger.debug('useCart.addItem', {
            product,
            quantity,
        });
        try {
            loading.value = true;
            const updatedCart = await _factoryParams.addItem({
                currentCart: cart.value,
                product,
                quantity,
                customQuery,
            });
            error.value.addItem = null;
            cart.value = updatedCart;
            totalQuantity.value = updatedCart.total_quantity;
        }
        catch (err) {
            error.value.addItem = err;
            Logger.error('useCart/addItem', err);
        }
        finally {
            loading.value = false;
        }
    };
    const removeItem = async ({ product, customQuery, }) => {
        Logger.debug('useCart.removeItem', { product });
        try {
            loading.value = true;
            const updatedCart = await _factoryParams.removeItem({
                currentCart: cart.value,
                product,
                customQuery,
            });
            error.value.removeItem = null;
            cart.value = updatedCart;
            totalQuantity.value = updatedCart.total_quantity;
        }
        catch (err) {
            error.value.removeItem = err;
            Logger.error('useCart/removeItem', err);
        }
        finally {
            loading.value = false;
        }
    };
    const updateItemQty = async ({ product, quantity, customQuery, }) => {
        Logger.debug('useCart.updateItemQty', {
            product,
            quantity,
        });
        if (quantity && quantity > 0) {
            try {
                loading.value = true;
                const updatedCart = await _factoryParams.updateItemQty({
                    currentCart: cart.value,
                    product,
                    quantity,
                    customQuery,
                });
                error.value.updateItemQty = null;
                cart.value = updatedCart;
                totalQuantity.value = updatedCart.total_quantity;
            }
            catch (err) {
                error.value.updateItemQty = err;
                Logger.error('useCart/updateItemQty', err);
            }
            finally {
                loading.value = false;
            }
        }
    };
    const load = async ({ customQuery } = { customQuery: undefined }) => {
        var _a;
        Logger.debug('useCart.load');
        try {
            loading.value = true;
            const loadedCart = await _factoryParams.load({ customQuery });
            cart.value = loadedCart;
            totalQuantity.value = (_a = loadedCart === null || loadedCart === void 0 ? void 0 : loadedCart.total_quantity) !== null && _a !== void 0 ? _a : 0;
            error.value.load = null;
        }
        catch (err) {
            error.value.load = err;
            Logger.error('useCart/load', err);
        }
        finally {
            loading.value = false;
        }
    };
    const loadTotalQty = async ({ customQuery } = { customQuery: undefined }) => {
        Logger.debug('useCart.loadTotalQty');
        try {
            loading.value = true;
            totalQuantity.value = await _factoryParams.loadTotalQty({ customQuery });
            error.value.loadTotalQty = null;
        }
        catch (err) {
            error.value.loadTotalQty = err;
            Logger.error('useCart/loadTotalQty', err);
        }
        finally {
            loading.value = false;
        }
    };
    const clear = async () => {
        Logger.debug('useCart.clear');
        try {
            loading.value = true;
            const updatedCart = await _factoryParams.clear({ currentCart: cart.value });
            error.value.clear = null;
            cart.value = updatedCart;
            totalQuantity.value = 0;
        }
        catch (err) {
            error.value.clear = err;
            Logger.error('useCart/clear', err);
        }
        finally {
            loading.value = false;
        }
    };
    const isInCart = ({ product }) => _factoryParams.isInCart({
        currentCart: cart.value,
        product,
    });
    const applyCoupon = async ({ couponCode, customQuery, }) => {
        Logger.debug('useCart.applyCoupon');
        try {
            loading.value = true;
            const { updatedCart } = await _factoryParams.applyCoupon({
                currentCart: cart.value,
                couponCode,
                customQuery,
            });
            error.value.applyCoupon = null;
            cart.value = updatedCart;
        }
        catch (err) {
            error.value.applyCoupon = err;
            Logger.error('useCart/applyCoupon', err);
        }
        finally {
            loading.value = false;
        }
    };
    const removeCoupon = async ({ couponCode, customQuery, }) => {
        Logger.debug('useCart.removeCoupon');
        try {
            loading.value = true;
            const { updatedCart } = await _factoryParams.removeCoupon({
                currentCart: cart.value,
                couponCode,
                customQuery,
            });
            error.value.removeCoupon = null;
            cart.value = updatedCart;
            loading.value = false;
        }
        catch (err) {
            error.value.removeCoupon = err;
            Logger.error('useCart/removeCoupon', err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        api: _factoryParams.api,
        setCart,
        cart: computed(() => cart.value),
        totalQuantity,
        isInCart,
        addItem,
        load,
        loadTotalQty,
        removeItem,
        clear,
        updateItemQty,
        applyCoupon,
        removeCoupon,
        loading: computed(() => loading.value),
        error: computed(() => error.value),
    };
};

/* istanbul ignore file */
const factoryParams$s = {
    load: async (context, params) => {
        const apiState = context.$magento.config.state;
        Logger.debug('[Magento Storefront]: Loading Cart');
        const customerToken = apiState.getCustomerToken();
        const virtual = !params.realCart;
        const createVirtualCart = () => null;
        const createRealCart = async () => {
            Logger.debug('[Magento Storefront]: useCart.load.createNewCart');
            apiState.setCartId();
            const { data } = await context.$magento.api.createEmptyCart();
            Logger.debug('[Result]:', { data });
            apiState.setCartId(data.createEmptyCart);
            return data.createEmptyCart;
        };
        const getCartData = async (id) => {
            Logger.debug('[Magento Storefront]: useCart.load.getCartData ID->', id);
            const { data, errors } = await context.$magento.api.cart(id);
            Logger.debug('[Result]:', { data });
            if (!(data === null || data === void 0 ? void 0 : data.cart) && (errors === null || errors === void 0 ? void 0 : errors.length)) {
                throw errors[0];
            }
            data.cart.items = data.cart.items.filter(Boolean);
            return data.cart;
        };
        const getCart = async (virtualCart, cartId) => {
            if (!cartId) {
                if (virtualCart) {
                    return createVirtualCart();
                }
                cartId = await createRealCart();
                apiState.setCartId(cartId);
            }
            return getCartData(cartId);
        };
        // Try to load cart for existing customer, clean customer token if not possible
        if (customerToken) {
            try {
                const { data, errors } = await context.$magento.api.customerCart();
                Logger.debug('[Result]:', { data, errors });
                if (!(data === null || data === void 0 ? void 0 : data.customerCart) && (errors === null || errors === void 0 ? void 0 : errors.length)) {
                    throw errors[0];
                }
                apiState.setCartId(data.customerCart.id);
                data.customerCart.items = data.customerCart.items.filter(Boolean);
                return data.customerCart;
            }
            catch {
                apiState.setCustomerToken();
            }
        }
        try {
            // If it's not existing customer check if cart id is set and try to load it
            const cartId = apiState.getCartId();
            return await getCart(virtual, cartId);
        }
        catch {
            apiState.setCartId();
            return await getCart(virtual);
        }
    },
    addItem: async (context, { product, quantity, currentCart, customQuery, }) => {
        var _a, _b;
        Logger.debug('[Magento]: Add item to cart', {
            product,
            quantity,
            currentCart,
        });
        const apiState = context.$magento.config.state;
        let currentCartId = apiState.getCartId();
        if (!currentCartId) {
            await factoryParams$s.load(context, {
                realCart: true,
            });
            currentCartId = apiState.getCartId();
        }
        if (!product) {
            return;
        }
        try {
            // @ts-ignore
            // eslint-disable-next-line no-underscore-dangle
            switch (product.__typename) {
                case 'SimpleProduct':
                    const simpleCartInput = {
                        cartId: currentCartId,
                        cartItems: [
                            {
                                quantity,
                                sku: product.sku,
                            },
                        ],
                    };
                    const simpleProduct = await context.$magento.api.addProductsToCart(simpleCartInput);
                    Logger.debug('[Result]:', { data: simpleProduct });
                    // eslint-disable-next-line consistent-return
                    return simpleProduct
                        .data
                        .addProductsToCart
                        .cart;
                case 'ConfigurableProduct':
                    const cartItems = [
                        {
                            parent_sku: product.sku,
                            data: {
                                quantity,
                                sku: ((_b = (_a = product.configurable_product_options_selection) === null || _a === void 0 ? void 0 : _a.variant) === null || _b === void 0 ? void 0 : _b.sku) || '',
                            },
                        },
                    ];
                    const configurableCartInput = {
                        cart_id: currentCartId,
                        cart_items: cartItems,
                    };
                    const configurableProduct = await context.$magento.api.addConfigurableProductsToCart(configurableCartInput);
                    Logger.debug('[Result]:', { data: configurableProduct });
                    // eslint-disable-next-line consistent-return
                    return configurableProduct
                        .data
                        .addConfigurableProductsToCart
                        .cart;
                case 'BundleProduct':
                    const createEnteredOptions = () => 
                    // @ts-ignore
                    // eslint-disable-next-line implicit-arrow-linebreak
                    product.bundle_options.map((bundleOption) => ({
                        ...bundleOption,
                        value: bundleOption.value.toString(),
                    }));
                    const bundleCartInput = {
                        cartId: currentCartId,
                        cartItems: [
                            {
                                quantity,
                                sku: product.sku,
                                entered_options: createEnteredOptions(),
                            },
                        ],
                    };
                    const bundleProduct = await context.$magento.api.addProductsToCart(bundleCartInput);
                    Logger.debug('[Result]:', { data: bundleProduct });
                    // eslint-disable-next-line consistent-return
                    return bundleProduct
                        .data
                        .addProductsToCart
                        .cart;
                case 'DownloadableProduct':
                    const downloadableCartItems = [
                        {
                            data: {
                                quantity,
                                sku: product.sku,
                            },
                            downloadable_product_links: product.downloadable_product_links.map((dpl) => ({ link_id: dpl.id })),
                        },
                    ];
                    const downloadableCartInput = {
                        cart_id: currentCartId,
                        cart_items: downloadableCartItems,
                    };
                    const downloadableProduct = await context.$magento.api.addDownloadableProductsToCart(downloadableCartInput);
                    Logger.debug('[Result DownloadableProduct]:', { data: downloadableProduct });
                    // eslint-disable-next-line consistent-return
                    return downloadableProduct
                        .data
                        .addDownloadableProductsToCart
                        .cart;
                case 'VirtualProduct':
                    const virtualCartInput = {
                        cart_id: currentCartId,
                        cart_items: [
                            {
                                data: {
                                    quantity,
                                    sku: product.sku,
                                },
                            },
                        ],
                    };
                    const virtualProduct = await context.$magento.api.addVirtualProductsToCart(virtualCartInput);
                    Logger.debug('[Result VirtualProduct]:', { data: virtualProduct });
                    // eslint-disable-next-line consistent-return
                    return virtualProduct
                        .data
                        .addVirtualProductsToCart
                        .cart;
                default:
                    // todo implement other options
                    // @ts-ignore
                    // eslint-disable-next-line no-underscore-dangle
                    throw new Error(`Product Type ${product.__typename} not supported in add to cart yet`);
            }
        }
        catch {
            await factoryParams$s.clear(context, null);
            await factoryParams$s.addItem(context, {
                product,
                quantity,
                currentCart,
                customQuery,
            });
        }
    },
    removeItem: async (context, { currentCart, product, }) => {
        Logger.debug('[Magento]: Remove item from cart', {
            product,
            currentCart,
        });
        const item = currentCart.items.find((cartItem) => cartItem.uid === product.uid);
        if (!item) {
            return;
        }
        const removeItemParams = {
            cart_id: currentCart.id,
            cart_item_uid: item.uid,
        };
        const { data } = await context.$magento.api.removeItemFromCart(removeItemParams);
        Logger.debug('[Result]:', { data });
        // eslint-disable-next-line consistent-return
        return data
            .removeItemFromCart
            .cart;
    },
    updateItemQty: async (context, { currentCart, product, quantity, }) => {
        Logger.debug('[Magento]: Update product quantity on cart', {
            product,
            quantity,
            currentCart,
        });
        const updateCartParams = {
            cart_id: currentCart.id,
            cart_items: [
                {
                    cart_item_uid: product.uid,
                    quantity,
                },
            ],
        };
        try {
            const { data } = await context.$magento.api.updateCartItems(updateCartParams);
            Logger.debug('[Result]:', { data });
            return data
                .updateCartItems
                .cart;
        }
        catch {
            // If we can't change quantity, the card could be expired on Magento side, try to reload
            return await factoryParams$s.load(context, {
                realCart: true,
            });
        }
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    clear: async (context, _params = null) => {
        context.$magento.config.state.setCartId();
        return factoryParams$s.load(context, {});
    },
    applyCoupon: async (context, { currentCart, couponCode, }) => {
        Logger.debug('[Magento]: Apply coupon on cart', {
            couponCode,
            currentCart,
        });
        const { data } = await context.$magento.api.applyCouponToCart({
            cart_id: currentCart.id,
            coupon_code: couponCode,
        });
        Logger.debug('[Result]:', { data });
        return {
            updatedCart: data.applyCouponToCart.cart,
            updatedCoupon: { code: couponCode },
        };
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeCoupon: async (context, { currentCart }) => {
        Logger.debug('[Magento]: Remove coupon from cart', { currentCart });
        const { data } = await context.$magento.api.removeCouponFromCart({
            cart_id: currentCart.id,
        });
        Logger.debug('[Result]:', { data });
        return {
            updatedCart: data.removeCouponFromCart.cart,
            updatedCoupon: { code: '' },
        };
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isInCart: (context, { currentCart, product, }) => !!(currentCart === null || currentCart === void 0 ? void 0 : currentCart.items.find((cartItem) => { var _a; return ((_a = cartItem === null || cartItem === void 0 ? void 0 : cartItem.product) === null || _a === void 0 ? void 0 : _a.uid) === product.uid; })),
    loadTotalQty: async (context) => {
        var _a, _b;
        const apiState = context.$magento.config.state;
        if (apiState.getCartId()) {
            const { data } = await context.$magento.api.cartTotalQty(apiState.getCartId());
            return (_b = (_a = data === null || data === void 0 ? void 0 : data.cart) === null || _a === void 0 ? void 0 : _a.total_quantity) !== null && _b !== void 0 ? _b : 0;
        }
        return 0;
    },
};
var useCart = useCartFactory(factoryParams$s);

const factoryParams$r = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    load: async (context, { customQuery }) => {
        var _a, _b, _c, _d, _e;
        Logger.debug('[Magento] loadShippingProvider', { customQuery });
        if (!((_c = (_b = (_a = context.cart.cart) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.shipping_addresses[0]) === null || _c === void 0 ? void 0 : _c.selected_shipping_method)) {
            await context.cart.load({ customQuery });
        }
        return (_e = (_d = context
            .cart
            .cart
            .value) === null || _d === void 0 ? void 0 : _d.shipping_addresses[0]) === null || _e === void 0 ? void 0 : _e.selected_shipping_method;
    },
    save: async (context, params) => {
        Logger.debug('[Magento] saveShippingProvider', { params });
        const shippingMethodParams = {
            cart_id: context.cart.cart.value.id,
            shipping_methods: [{
                    ...params.shippingMethod,
                }],
        };
        const { data } = await context.$magento.api.setShippingMethodsOnCart(shippingMethodParams);
        Logger.debug('[Result]:', { data });
        const { cart } = data
            .setShippingMethodsOnCart;
        context.cart.setCart(cart);
        return cart
            .shipping_addresses[0]
            .selected_shipping_method;
    },
};
var useShippingProvider = useShippingProviderFactory(factoryParams$r);

const factoryParams$q = {
    provide() {
        return {
            useShippingProvider: useShippingProvider(),
            cart: useCart(),
        };
    },
    load: async (context, { customQuery }) => {
        var _a, _b, _c, _d, _e, _f;
        Logger.debug('[Magento] loadBilling');
        if (!((_b = (_a = context.cart.cart) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.billing_address)) {
            await context.cart.load({ customQuery });
        }
        return (_f = (_e = (_d = (_c = context === null || context === void 0 ? void 0 : context.cart) === null || _c === void 0 ? void 0 : _c.cart) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.billing_address) !== null && _f !== void 0 ? _f : {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    save: async (context, params) => {
        var _a, _b, _c;
        Logger.debug('[Magento] setBillingAddress');
        const { id } = context.cart.cart.value;
        const { apartment, neighborhood, extra, sameAsShipping, customerAddressId, ...address } = params.billingDetails;
        const billingData = customerAddressId
            ? ({
                customer_address_id: customerAddressId,
            })
            : ({
                address: {
                    ...address,
                    street: [address.street, apartment, neighborhood, extra].filter(Boolean),
                },
                same_as_shipping: sameAsShipping,
            });
        const setBillingAddressOnCartInput = {
            cart_id: id,
            billing_address: billingData,
        };
        const { data } = await context.$magento.api.setBillingAddressOnCart(setBillingAddressOnCartInput);
        Logger.debug('[Result]:', { data });
        /**
         * This is a workaround needed due to Magento GraphQL API
         * cleaning the Shipping method after defining the billing address
         */
        const shippingMethod = context.useShippingProvider.state.value;
        Logger.debug('[Magento]: Defining the shipping method as:', JSON.stringify(shippingMethod, null, 2));
        await context.useShippingProvider.save({
            shippingMethod: {
                carrier_code: shippingMethod.carrier_code,
                method_code: shippingMethod.method_code,
            },
        });
        /**
         * End of GraphQL Workaround
         */
        return (_c = (_b = (_a = data === null || data === void 0 ? void 0 : data.setBillingAddressOnCart) === null || _a === void 0 ? void 0 : _a.cart) === null || _b === void 0 ? void 0 : _b.billing_address) !== null && _c !== void 0 ? _c : {};
    },
};
var index$f = useBillingFactory(factoryParams$q);

const factoryParams$p = {
    categorySearch: async (context, params) => {
        Logger.debug('[Magento]: List available categories', { params });
        const { data } = await context.$magento.api.categoryList(params);
        Logger.debug('[Result]:', { data });
        return data.categories.items;
    },
};
var index$e = useCategoryFactory(factoryParams$p);

function useCategorySearchFactory(factoryParams) {
    return function useCategorySearch(id = '') {
        const ssrKey = id || 'useCategorySearch';
        // @ts-ignore
        const result = sharedRef([], `${ssrKey}-result`);
        const loading = sharedRef(false, `${ssrKey}-loading`);
        const error = sharedRef({
            search: null,
        }, `${ssrKey}-error`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        // eslint-disable-next-line consistent-return
        const search = async (params) => {
            Logger.debug(`useCategorySearch/${ssrKey}/search`);
            try {
                loading.value = true;
                const data = await _factoryParams.search(params);
                result.value = data;
                error.value.search = null;
                return data;
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useCategorySearch/${ssrKey}/search`, err);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            search,
            result: computed(() => result.value),
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    };
}

const factoryParams$o = {
    search: async (context, params) => {
        Logger.debug('[Magento]: Search for category using', { params });
        const { filters } = params;
        const { data } = await context.$magento.api.categorySearch({ filters });
        Logger.debug('[Result]:', { data });
        return data.categoryList;
    },
};
const useCategorySearch = useCategorySearchFactory(factoryParams$o);
var useCategorySearch$1 = useCategorySearch;

function useConfigFactory(factoryParams) {
    return function useConfig(cacheId = '') {
        const ssrKey = cacheId || 'useConfigFactory';
        // @ts-ignore
        const config = sharedRef({}, `${ssrKey}-config`);
        const loading = sharedRef(false, `${ssrKey}-loading`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        const loadConfig = async (params) => {
            Logger.debug(`useConfig/${ssrKey}/loadConfig`);
            loading.value = true;
            try {
                config.value = await _factoryParams.loadConfig(params);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            loadConfig,
            config: computed(() => config.value),
            loading: computed(() => loading.value),
        };
    };
}

const factoryParams$n = {
    loadConfig: async (context) => {
        const { data } = await context.$magento.api.storeConfig();
        Logger.debug('[Magento] useConfig:loadConfig data', { data });
        return data.storeConfig || {};
    },
};
const useConfig = useConfigFactory(factoryParams$n);
var useConfig$1 = useConfig;

function useContentFactory(factoryParams) {
    return function useContent(ssrKey = 'useConfigFactory') {
        // @ts-ignore
        const page = sharedRef({}, `useContent-content-${ssrKey}`);
        const errors = sharedRef({
            content: null,
            blocks: null,
        }, 'useContent-error');
        const blocks = sharedRef([], `useContent-blocks-${ssrKey}`);
        const loading = sharedRef(false, `useContent-loading-${ssrKey}`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        const loadContent = async (params) => {
            Logger.debug(`useContent/${ssrKey}/loadPage`);
            loading.value = true;
            try {
                errors.value.content = null;
                page.value = await _factoryParams.loadContent(params);
            }
            catch (error) {
                errors.value.content = error;
            }
            finally {
                loading.value = false;
            }
        };
        const loadBlocks = async (params) => {
            Logger.debug(`useContent/${ssrKey}/loadBlocks`);
            loading.value = true;
            try {
                errors.value.blocks = null;
                blocks.value = await _factoryParams.loadBlocks(params);
            }
            catch (error) {
                errors.value.blocks = error;
            }
            finally {
                loading.value = false;
            }
        };
        return {
            loadContent,
            loadBlocks,
            loading: computed(() => loading.value),
            page: computed(() => page.value),
            blocks: computed(() => blocks.value),
            error: computed(() => errors.value),
        };
    };
}

const factoryParams$m = {
    loadContent: async (context, params) => {
        Logger.debug('[Magento]: Load CMS Page content', { params });
        const { data } = await context.$magento.api.cmsPage(params.identifier);
        Logger.debug('[Result]:', { data });
        return data.cmsPage;
    },
    loadBlocks: async (context, params) => {
        Logger.debug('[Magento]: Load CMS Blocks content', { params });
        const { data } = await context.$magento.api.cmsBlocks(params.identifiers);
        Logger.debug('[Result]:', { data });
        return data.cmsBlocks.items;
    },
};
var index$d = useContentFactory(factoryParams$m);

function useCountrySearchFactory(factoryParams) {
    return function useCountrySearch(cacheId = '') {
        const ssrKey = cacheId || 'useCountrySearchFactory';
        const countries = sharedRef([], `${ssrKey}-countries`);
        // @ts-ignore
        const country = sharedRef({}, `${ssrKey}-country`);
        const loading = sharedRef(false, `${ssrKey}-loading`);
        const error = sharedRef({
            load: null,
            search: null,
        }, `${ssrKey}-error`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        // eslint-disable-next-line consistent-return
        const load = async (params) => {
            Logger.debug(`useCountrySearch/${ssrKey}/load`);
            try {
                loading.value = true;
                const data = await _factoryParams.load(params);
                countries.value = data;
                error.value.load = null;
                return data;
            }
            catch (err) {
                error.value.load = err;
                Logger.error(`useCountrySearch/${ssrKey}/load`, err);
            }
            finally {
                loading.value = false;
            }
        };
        // eslint-disable-next-line consistent-return
        const search = async (params) => {
            Logger.debug(`useCountrySearch/${ssrKey}/search`);
            try {
                loading.value = true;
                const data = await _factoryParams.search(params);
                country.value = data;
                error.value.search = null;
                return data;
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useCountrySearch/${ssrKey}/search`, err);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            load,
            search,
            countries: computed(() => countries.value),
            country: computed(() => country.value),
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    };
}

const factoryParams$l = {
    load: async (context, _params) => {
        Logger.debug('[Magento]: Load available countries on store');
        const { data } = await context.$magento.api.countries();
        Logger.debug('[Result]:', { data });
        return data.countries;
    },
    search: async (context, params) => {
        Logger.debug('[Magento]: Search country information based on', { params });
        const { data } = await context.$magento.api.country(params.id);
        Logger.debug('[Result]:', { data });
        return data.country;
    },
};
const useCountrySearch = useCountrySearchFactory(factoryParams$l);
var useCountrySearch$1 = useCountrySearch;

function useCurrencyFactory(factoryParams) {
    return function useCurrency(cacheId = '') {
        const ssrKey = cacheId || 'useCurrencyFactory';
        // @ts-ignore
        const currencies = sharedRef([], `${ssrKey}-currencies`);
        const loading = sharedRef(false, `${ssrKey}-loading`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        const load = async (params) => {
            Logger.debug(`useCurrency/${ssrKey}/load`);
            loading.value = true;
            try {
                currencies.value = await _factoryParams.load(params);
            }
            finally {
                loading.value = false;
            }
        };
        const change = async (params) => {
            Logger.debug(`useCurrency/${ssrKey}/change`);
            loading.value = true;
            try {
                await _factoryParams.change(params);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            load,
            change,
            currencies: computed(() => currencies.value),
            loading: computed(() => loading.value),
        };
    };
}

const factoryParams$k = {
    load: async (context, params) => {
        const { data } = await context.$magento.api.currency();
        return data.currency || {};
    },
    change: (context, params) => {
        context.$magento.config.state.setCurrency(params.id);
    },
};
const useCurrency = useCurrencyFactory(factoryParams$k);
var useCurrency$1 = useCurrency;

const useCustomMutationFactory = (factoryParams) => function useCustomMutation(ssrKey = 'useCustomMutation') {
    // @ts-ignore
    const mutationString = sharedRef('', `${ssrKey}-mutationString`);
    const mutationStringComputed = computed(() => mutationString.value);
    // @ts-ignore
    const result = sharedRef({}, `${ssrKey}-result`);
    const loading = sharedRef(false, `${ssrKey}-loading`);
    const error = sharedRef({
        query: null,
    }, `${ssrKey}-error`);
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    // eslint-disable-next-line consistent-return
    const mutation = async ({ variables, fetchPolicy, }) => {
        Logger.debug(`useCustomMutation/${ssrKey}/mutation`);
        loading.value = true;
        try {
            const data = await _factoryParams.mutation({
                mutation: mutationStringComputed.value,
                variables,
                fetchPolicy,
            });
            result.value = data;
            return data;
        }
        catch (err) {
            error.value.search = err;
            Logger.error(`useCustomMutation/${ssrKey}/mutation`, err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        setMutationString: (newMutationString) => {
            mutationString.value = newMutationString;
        },
        mutationString: mutationStringComputed,
        mutation,
        result: computed(() => result.value),
        loading: computed(() => loading.value),
        error: computed(() => error.value),
    };
};

var index$c = useCustomMutationFactory({
    mutation: async (context, { mutation, variables, fetchPolicy, }) => {
        Logger.debug('[Magento] Custom API Mutation', { variables });
        const result = await context.$magento.api.customMutation({
            mutation,
            mutationVariables: variables,
            fetchPolicy,
        });
        Logger.debug('[Custom Mutation -> Result]:', result);
        return result;
    },
});

const useCustomQueryFactory = (factoryParams) => function useCustomQuery(ssrKey = 'useCustomQuery') {
    // @ts-ignore
    const queryString = sharedRef('', `${ssrKey}-queryString`);
    const queryStringComputed = computed(() => queryString.value);
    // @ts-ignore
    const result = sharedRef({}, `${ssrKey}-result`);
    const loading = sharedRef(false, `${ssrKey}-loading`);
    const error = sharedRef({
        query: null,
    }, `${ssrKey}-error`);
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    // eslint-disable-next-line consistent-return
    const query = async ({ variables, fetchPolicy, }) => {
        Logger.debug(`useCustomQuery/${ssrKey}/query`);
        loading.value = true;
        try {
            const data = await _factoryParams.query({
                query: queryStringComputed.value,
                variables,
                fetchPolicy,
            });
            result.value = data;
            return data;
        }
        catch (err) {
            error.value.search = err;
            Logger.error(`useCustomQuery/${ssrKey}/query`, err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        setQueryString: (newQueryString) => {
            queryString.value = newQueryString;
        },
        queryString: queryStringComputed,
        query,
        result: computed(() => result.value),
        loading: computed(() => loading.value),
        error: computed(() => error.value),
    };
};

/**
 * @deprecated Will be removed in 1.1.0 release
 * @use @vue-storefront/magento-theme/composables/useApi instead
 */
var index$b = useCustomQueryFactory({
    query: async (context, { query, variables, fetchPolicy, }) => {
        Logger.debug('[Magento] Custom API Query', { variables });
        const result = await context.$magento.api.customQuery({
            query,
            queryVariables: variables,
            fetchPolicy,
        });
        Logger.debug('[Custom Query -> Result]:', result);
        return result;
    },
});

const useExternalCheckoutFactory = (factoryParams) => {
    function useExternalCheckout(ssrKey = 'useExternalCheckout') {
        const loading = sharedRef(false, `${ssrKey}-loading`);
        const error = sharedRef({
            search: null,
        }, `${ssrKey}-error`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        // eslint-disable-next-line @typescript-eslint/require-await,consistent-return
        const initializeCheckout = async (params) => {
            Logger.debug(`useExternalCheckout/${ssrKey}/initializeCheckout`);
            loading.value = true;
            try {
                return _factoryParams.initializeCheckout(params);
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useExternalCheckout/${ssrKey}/initializeCheckout`, err);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            initializeCheckout,
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    }
    return useExternalCheckout;
};

// import useConfig from '../useConfig';
const factoryParams$j = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    initializeCheckout: async (context, params) => {
        Logger.debug('[Magento]: Initialize external checkout', { params });
        const { externalCheckout, state } = context.$magento.config;
        const userToken = state.getCustomerToken();
        const cartToken = state.getCartId();
        Logger.debug({ userToken, cartToken });
        if (externalCheckout.enable) {
            if (userToken && cartToken) {
                // @TODO: Implements Multiple Store
                /* if (Object.keys(externalCheckout.stores).length) {
        
                } */
                window.location.replace(`${externalCheckout.cmsUrl}${externalCheckout.syncUrlPath}/token/${userToken}/cart/${cartToken}`);
                return '';
            }
            window.location.replace(`${externalCheckout.cmsUrl}${externalCheckout.syncUrlPath}/token//cart/${cartToken}`);
            return '';
        }
        return params.baseUrl;
    },
};
var index$a = useExternalCheckoutFactory(factoryParams$j);

const availableSortingOptions = [
    {
        label: 'Sort: Default',
        value: '',
    },
    {
        label: 'Sort: Name A-Z',
        value: 'name_ASC',
    },
    {
        label: 'Sort: Name Z-A',
        value: 'name_DESC',
    },
    {
        label: 'Sort: Price from low to high',
        value: 'price_ASC',
    }, {
        label: 'Sort: Price from high to low',
        value: 'price_DESC',
    },
];
const constructFilterObject = (inputFilters) => {
    const filter = {};
    Object.keys(inputFilters).forEach((key) => {
        if (key === 'price') {
            const price = { from: 0, to: 0 };
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const flatPrices = inputFilters[key].flatMap((inputFilter) => inputFilter.split('_').map((str) => Number.parseFloat(str))).sort((a, b) => a - b);
            [price.from] = flatPrices;
            price.to = flatPrices[flatPrices.length - 1];
            filter[key] = price;
        }
        else if (typeof inputFilters[key] === 'string') {
            filter[key] = { in: [inputFilters[key]] };
        }
        else {
            filter[key] = { in: inputFilters[key] };
        }
    });
    return filter;
};
const constructSortObject = (sortData) => {
    const baseData = sortData.split(/_/gi);
    return baseData.length > 0 ? Object.fromEntries([baseData]) : {};
};
const factoryParams$i = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    search: async (context, params) => {
        var _a, _b, _c;
        Logger.debug('[Magento] Load product facets', { params });
        const itemsPerPage = (params.input.itemsPerPage) ? params.input.itemsPerPage : 20;
        const inputFilters = (params.input.filters) ? params.input.filters : {};
        const categoryId = (params.input.categoryId) ? {
            category_uid: {
                ...(Array.isArray(params.input.categoryId)
                    ? { in: params.input.categoryId }
                    : { eq: params.input.categoryId }),
            },
        } : {};
        const productParams = {
            filter: {
                ...categoryId,
                ...constructFilterObject({
                    ...inputFilters,
                }),
            },
            perPage: itemsPerPage,
            offset: (params.input.page - 1) * itemsPerPage,
            page: params.input.page,
            search: (params.input.term) ? params.input.term : '',
            sort: constructSortObject(params.input.sort || ''),
        };
        const productSearchParams = {
            pageSize: productParams.perPage,
            search: productParams.search,
            filter: productParams.filter,
            sort: productParams.sort,
            currentPage: productParams.page,
        };
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        const { data } = await context.$magento.api.products(productSearchParams, (params === null || params === void 0 ? void 0 : params.input.customQuery) || { products: 'products' });
        Logger.debug('[Result]:', { data });
        return {
            items: ((_a = data === null || data === void 0 ? void 0 : data.products) === null || _a === void 0 ? void 0 : _a.items) || [],
            total: (_b = data === null || data === void 0 ? void 0 : data.products) === null || _b === void 0 ? void 0 : _b.total_count,
            availableFilters: (_c = data === null || data === void 0 ? void 0 : data.products) === null || _c === void 0 ? void 0 : _c.aggregations,
            category: { id: params.input.categoryId },
            availableSortingOptions,
            perPageOptions: [10, 20, 50],
            itemsPerPage,
        };
    },
};
var index$9 = useFacetFactory(factoryParams$i);

const factoryParams$h = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    resetPassword: async (context, params) => {
        Logger.debug('[Magento]: Reset user password', { params });
        const { data } = await context.$magento.api.requestPasswordResetEmail({ email: params.email, recaptchaToken: params.recaptchaToken });
        Logger.debug('[Result]:', { data });
        return data;
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setNewPassword: async (context, params) => {
        Logger.debug('[Magento]: Define new user password', { params });
        const { data } = await context.$magento.api.resetPassword({
            email: params.email,
            newPassword: params.newPassword,
            resetPasswordToken: params.tokenValue,
            recaptchaToken: params.recaptchaToken,
        });
        Logger.debug('[Result]:', { data });
        return data;
    },
};
const useForgotPassword = useForgotPasswordFactory(factoryParams$h);
var useForgotPassword$1 = useForgotPassword;

function useGetShippingMethodsFactory(factoryParams) {
    return function useGetShippingMethods(id = '') {
        // @ts-ignore
        const state = sharedRef(null, 'UseGetShippingMethods-response');
        const ssrKey = id || 'useGetShippingMethods';
        const loading = sharedRef(false, `${ssrKey}-loading`);
        const error = sharedRef({
            load: null,
        }, `${ssrKey}-error`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        // eslint-disable-next-line consistent-return
        const load = async (params) => {
            Logger.debug(`useGetShippingMethods/${ssrKey}/load`, { params });
            try {
                loading.value = true;
                const data = await _factoryParams.load(params);
                state.value = data;
                error.value.search = null;
                return data;
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useGetShippingMethods/${ssrKey}/load`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const setState = (newState) => {
            state.value = newState;
            Logger.debug('useGetShippingMethods.setState', newState);
        };
        return {
            state,
            setState,
            load,
            result: computed(() => state.value),
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    };
}

const factoryParams$g = {
    load: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento]: Load shipping methods', { params });
        const isGuest = params.cartId;
        if (isGuest) {
            const { data } = await context.$magento.api.getAvailableShippingMethods({ cartId: params.cartId });
            Logger.debug('[Result]:', { data });
            const hasAddresses = data.cart.shipping_addresses.length > 0;
            return hasAddresses ? data.cart.shipping_addresses[0].available_shipping_methods : [];
        }
        const { data } = await context.$magento.api.getAvailableCustomerShippingMethods();
        Logger.debug('[Result]:', { data });
        const hasAddresses = data.customerCart.shipping_addresses.length > 0;
        return hasAddresses ? (_b = (_a = data === null || data === void 0 ? void 0 : data.customerCart) === null || _a === void 0 ? void 0 : _a.shipping_addresses[0]) === null || _b === void 0 ? void 0 : _b.available_shipping_methods : [];
    },
};
const useGetShippingMethods = useGetShippingMethodsFactory(factoryParams$g);
var useGetShippingMethods$1 = useGetShippingMethods;

const useGuestUserFactory = (factoryParams) => function useGuestUser() {
    const errorsFactory = () => ({
        attachToCart: null,
    });
    const guestUser = sharedRef(null, 'useGuestUser-user');
    const loading = sharedRef(false, 'useGuestUser-loading');
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    const error = sharedRef(errorsFactory(), 'useGuestUser-error');
    const setGuestUser = (newUser) => {
        guestUser.value = newUser;
        Logger.debug('useGuestUserFactory.setGuestUser', newUser);
    };
    const resetErrorValue = () => {
        error.value = errorsFactory();
    };
    const attachToCart = async (params) => {
        Logger.debug('useGuestUserFactory.attachToCart', { params });
        resetErrorValue();
        try {
            loading.value = true;
            guestUser.value = await _factoryParams.attachToCart(params);
            error.value.attachToCart = null;
        }
        catch (err) {
            error.value.attachToCart = err;
            Logger.error('useGuestUser/attachToCart', err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        setGuestUser,
        attachToCart,
        guestUser: computed(() => guestUser.value),
        loading: computed(() => loading.value),
        error: computed(() => error.value),
    };
};

const factoryParams$f = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    attachToCart: async (context, params) => {
        Logger.debug('[Magento]: Attach guest cart to user');
        const emailOnCartInput = {
            email: params.email,
            cart_id: context.cart.cart.value.id,
        };
        await context.$magento.api.setGuestEmailOnCart({
            ...emailOnCartInput,
        });
    },
};
var index$8 = useGuestUserFactory(factoryParams$f);

const factoryParams$e = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    make: async (context, params) => {
        Logger.debug('[Magento] Make Order', { params });
        const { id } = context.cart.cart.value;
        const { data } = await context.$magento.api.placeOrder({ cart_id: id });
        Logger.debug('[Result]:', { data });
        return data.placeOrder.order;
    },
};
const useMakeOrder = useMakeOrderFactory(factoryParams$e);
var useMakeOrder$1 = useMakeOrder;

const generateUserData = (userData) => {
    const baseData = {
        email: userData.email,
        firstname: userData.firstName || userData.firstname,
        lastname: userData.lastName || userData.lastname,
    };
    if (Object.prototype.hasOwnProperty.call(userData, 'is_subscribed')) {
        baseData.is_subscribed = userData.is_subscribed;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'dateOfBirth') || Object.prototype.hasOwnProperty.call(userData, 'date_of_birth')) {
        baseData.date_of_birth = userData.dateOfBirth || userData.date_of_birth;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'gender')) {
        baseData.gender = userData.gender;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'taxvat')) {
        baseData.taxvat = userData.taxvat;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'prefix')) {
        baseData.prefix = userData.prefix;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'suffix')) {
        baseData.suffix = userData.suffix;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'password')) {
        baseData.password = userData.password;
    }
    if (Object.prototype.hasOwnProperty.call(userData, 'recaptchaToken')) {
        baseData.recaptchaToken = userData.recaptchaToken;
    }
    return baseData;
};

/* istanbul ignore file */
const factoryParams$d = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    load: async (context) => {
        var _a;
        Logger.debug('[Magento] Load user information');
        const apiState = context.$magento.config.state;
        if (!apiState.getCustomerToken()) {
            return null;
        }
        try {
            const { data } = await context.$magento.api.customer();
            Logger.debug('[Result]:', { data });
            return (_a = data === null || data === void 0 ? void 0 : data.customer) !== null && _a !== void 0 ? _a : {};
        }
        catch {
            // eslint-disable-next-line no-void
            // @ts-ignore
            await factoryParams$d.logOut(context);
        }
        return null;
    },
    logOut: async (context, params) => {
        const apiState = context.$magento.config.state;
        await context.$magento.api.revokeCustomerToken(params);
        apiState.setCustomerToken();
        apiState.setCartId();
    },
    updateUser: async (context, params) => {
        var _a;
        Logger.debug('[Magento] Update user information', { params });
        const { email: oldEmail } = params.currentUser;
        const { email, password, ...updateData } = params.updatedUserData;
        const userData = generateUserData(updateData);
        if (email && email !== oldEmail) {
            await context.$magento.api.updateCustomerEmail({
                email,
                password,
            });
        }
        const { data, errors } = await context.$magento.api.updateCustomer(userData);
        Logger.debug('[Result]:', { data });
        if (errors) {
            throw new Error(errors.map((e) => e.message).join(','));
        }
        // return data.updateCustomerV2.customer;
        return ((_a = data === null || data === void 0 ? void 0 : data.updateCustomerV2) === null || _a === void 0 ? void 0 : _a.customer) || {};
    },
    register: async (context, params) => {
        const { email, password, recaptchaToken, ...baseData } = generateUserData(params);
        const { data, errors } = await context.$magento.api.createCustomer({
            email,
            password,
            recaptchaToken,
            ...baseData,
        });
        Logger.debug('[Result]:', { data });
        if (errors) {
            Logger.error(errors);
            throw new Error(errors.map((e) => e.message).join(','));
        }
        if (!data.createCustomerV2 || !data.createCustomerV2.customer) {
            throw new Error('Customer registration error');
        }
        if (recaptchaToken) {
            // generate a new token for the login action
            const { recaptchaInstance } = params;
            const newRecaptchaToken = await recaptchaInstance.getResponse();
            return factoryParams$d.logIn(context, { username: email, password, recaptchaToken: newRecaptchaToken });
        }
        return factoryParams$d.logIn(context, { username: email, password });
    },
    logIn: async (context, params) => {
        Logger.debug('[Magento] Authenticate user');
        const apiState = context.$magento.config.state;
        const { data, errors } = await context.$magento.api.generateCustomerToken({
            email: params.username,
            password: params.password,
            recaptchaToken: params.recaptchaToken,
        });
        Logger.debug('[Result]:', { data });
        if (errors) {
            Logger.error(errors);
            throw new Error(errors.map((e) => e.message).join(','));
        }
        if (!data.generateCustomerToken || !data.generateCustomerToken.token) {
            throw new Error('Customer sign-in error');
        }
        apiState.setCustomerToken(data.generateCustomerToken.token);
        // merge existing cart with customer cart
        const currentCartId = apiState.getCartId();
        const cart = await context.$magento.api.customerCart();
        const newCartId = cart.data.customerCart.id;
        if (newCartId && currentCartId && currentCartId !== newCartId) {
            const { data: dataMergeCart } = await context.$magento.api.mergeCarts({
                sourceCartId: currentCartId,
                destinationCartId: newCartId,
            });
            context.cart.setCart(dataMergeCart.mergeCarts);
            apiState.setCartId(dataMergeCart.mergeCarts.id);
        }
        else {
            context.cart.setCart(cart.data.customerCart);
        }
        await context.$magento.api.wishlist({});
        return factoryParams$d.load(context);
    },
    changePassword: async (context, params) => {
        Logger.debug('[Magento] changing user password');
        const { data, errors } = await context.$magento.api.changeCustomerPassword(params);
        if (errors) {
            Logger.error(errors);
            throw new Error(errors.map((e) => e.message).join(','));
        }
        Logger.debug('[Result] ', { data });
        return data === null || data === void 0 ? void 0 : data.changeCustomerPassword;
    },
};
var useUser = useUserFactory(factoryParams$d);

const useNewsletterFactory = (factoryParams) => function useNewsletter() {
    const errorsFactory = () => ({
        updateSubscription: null,
    });
    const loading = sharedRef(false, 'useNewsletter-loading');
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    const error = sharedRef(errorsFactory(), 'useNewsletter-error');
    const resetErrorValue = () => {
        error.value = errorsFactory();
    };
    const updateSubscription = async (params) => {
        Logger.debug('useNewsletterFactory.updateSubscription', params);
        resetErrorValue();
        try {
            loading.value = true;
            await _factoryParams.updateSubscription(params);
            error.value.updateSubscription = null;
        }
        catch (err) {
            error.value.updateSubscription = err;
            Logger.error('useNewsletter/updateSubscription', err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        error: computed(() => error.value),
        loading: computed(() => loading.value),
        updateSubscription,
    };
};

/* istanbul ignore file */
const factoryParams$c = {
    provide() {
        return {
            user: useUser(),
        };
    },
    updateSubscription: async (context, params) => {
        Logger.debug('[Magento]: Update user newsletter subscription', { params });
        const { data } = await context.$magento.api.subscribeEmailToNewsletter({
            email: params.email,
        });
        Logger.debug('[Result]:', { data });
        return data.subscribeEmailToNewsletter.status;
    },
};
var index$7 = useNewsletterFactory(factoryParams$c);

const usePaymentProviderFactory = (factoryParams) => function usePaymentProvider() {
    const loading = sharedRef(false, 'usePaymentProvider-loading');
    const state = sharedRef(null, 'usePaymentProvider-response');
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    const error = sharedRef({
        load: null,
        save: null,
    }, 'usePaymentProvider-error');
    const setState = (newState) => {
        state.value = newState;
        Logger.debug('usePaymentProvider.setState', newState);
    };
    const save = async (params) => {
        Logger.debug('usePaymentProvider.save');
        try {
            loading.value = true;
            state.value = await _factoryParams.save({
                paymentMethod: params.paymentMethod || {},
                customQuery: (params === null || params === void 0 ? void 0 : params.customQuery) || {},
                state,
            });
            error.value.save = null;
        }
        catch (err) {
            error.value.save = err;
            Logger.error('usePaymentProvider/save', err);
        }
        finally {
            loading.value = false;
        }
    };
    const load = async (params) => {
        Logger.debug('usePaymentProvider.load');
        try {
            loading.value = true;
            state.value = await _factoryParams.load({
                customQuery: (params === null || params === void 0 ? void 0 : params.customQuery) || {},
                state,
            });
            error.value.load = null;
        }
        catch (err) {
            error.value.load = err;
            Logger.error('usePaymentProvider/load', err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        state,
        loading: computed(() => loading.value),
        error: computed(() => error.value),
        load,
        save,
        setState,
    };
};

const factoryParams$b = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    load: async (context, { customQuery }) => {
        Logger.debug('[Magento] loadPaymentProvider', { customQuery });
        const cartId = context.cart.cart.value.id;
        const { data } = await context
            .$magento
            .api
            .getAvailablePaymentMethods({ cartId });
        Logger.debug('[Result]:', { data });
        return data
            .cart
            .available_payment_methods;
    },
    save: async (context, params) => {
        Logger.debug('[Magento] savePaymentProvider', { params });
        const paymentMethodParams = {
            cart_id: context.cart.cart.value.id,
            payment_method: {
                ...params.paymentMethod,
            },
        };
        const { data } = await context
            .$magento
            .api
            .setPaymentMethodOnCart(paymentMethodParams);
        Logger.debug('[Result]:', { data });
        return data
            .setPaymentMethodOnCart
            .cart
            .available_payment_methods;
    },
};
var index$6 = usePaymentProviderFactory(factoryParams$b);

const factoryParams$a = {
    productsSearch: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento]: Load product based on ', { params });
        const { queryType, customQuery, ...searchParams } = {
            ...params,
        };
        switch (queryType) {
            case "DETAIL" /* Detail */:
                const productDetailsResults = await context
                    .$magento
                    .api
                    .productDetail({
                    ...searchParams,
                });
                Logger.debug('[Result]:', { data: productDetailsResults });
                return (_a = productDetailsResults.data) === null || _a === void 0 ? void 0 : _a.products;
            case "LIST" /* List */:
            default:
                const productListResults = await context
                    .$magento
                    .api
                    .products(searchParams);
                Logger.debug('[Result]:', { data: productListResults });
                return (_b = productListResults.data) === null || _b === void 0 ? void 0 : _b.products;
        }
    },
};
const useProduct = useProductFactory(factoryParams$a);
var useProduct$1 = useProduct;

function useRelatedProductsFactory(factoryParams) {
    return function useRelatedProduct(id) {
        const products = sharedRef([], `useRelatedProducts-products-${id}`);
        const loading = sharedRef(false, `useRelatedProducts-loading-${id}`);
        const error = sharedRef({
            search: null,
        }, `useRelatedProducts-error-${id}`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams, {
            mainRef: products, alias: 'relatedProducts-currentProduct', loading, error,
        });
        const search = async (searchParams) => {
            Logger.debug(`useRelatedProducts/${id}/search`, searchParams);
            try {
                loading.value = true;
                products.value = await _factoryParams.productsSearch(searchParams);
                error.value.search = null;
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useRelatedProducts/${id}/search`, err);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            search,
            products: computed(() => products.value),
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    };
}

const factoryParams$9 = {
    productsSearch: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento] Load related products based on ', { params });
        const { customQuery, ...searchParams } = params;
        const { data } = await context
            .$magento
            .api
            .relatedProduct(searchParams);
        Logger.debug('[Result]:', { data });
        return (_b = (_a = data.products) === null || _a === void 0 ? void 0 : _a.items[0]) === null || _b === void 0 ? void 0 : _b.related_products;
    },
};
const useRelatedProducts = useRelatedProductsFactory(factoryParams$9);
var useRelatedProducts$1 = useRelatedProducts;

function useReviewFactory(factoryParams) {
    return function useReview(id) {
        const reviews = sharedRef([], `useReviews-reviews-${id}`);
        const metadatas = sharedRef([], `useReviews-metadata-${id}`);
        const loading = sharedRef(false, `useReviews-loading-${id}`);
        const error = sharedRef({
            search: null,
            addReview: null,
            loadReviewMetadata: null,
            loadCustomerReviews: null,
        }, `useReviews-error-${id}`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        const search = async (searchParams) => {
            Logger.debug(`useReview/${id}/search`, searchParams);
            try {
                loading.value = true;
                reviews.value = await _factoryParams.searchReviews(searchParams);
                error.value.search = null;
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useReview/${id}/search`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const loadCustomerReviews = async () => {
            Logger.debug(`useReview/${id}/loadCustomerReviews`);
            try {
                loading.value = true;
                reviews.value = await _factoryParams.loadCustomerReviews();
                error.value.loadCustomerReviews = null;
            }
            catch (err) {
                error.value.loadCustomerReviews = err;
                Logger.error(`useReview/${id}/loadCustomerReviews`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const loadReviewMetadata = async (params) => {
            Logger.debug(`useReview/${id}/loadReviewMetadata`);
            try {
                loading.value = true;
                metadatas.value = await _factoryParams.loadReviewMetadata(params);
                error.value.loadReviewMetadata = null;
            }
            catch (err) {
                error.value.loadReviewMetadata = err;
                Logger.error(`useReview/${id}/loadReviewMetadata`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const addReview = async (params) => {
            Logger.debug(`useReview/${id}/addReview`, params);
            try {
                loading.value = true;
                reviews.value = await _factoryParams.addReview(params);
                error.value.addReview = null;
            }
            catch (err) {
                error.value.addReview = err;
                Logger.error(`useReview/${id}/addReview`, err);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            search,
            addReview,
            loadReviewMetadata,
            loadCustomerReviews,
            metadata: computed(() => metadatas.value),
            reviews: computed(() => reviews.value),
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    };
}

/* istanbul ignore file */
const factoryParams$8 = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    searchReviews: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento] search review params input:', JSON.stringify(params, null, 2));
        const { customQuery, ...input } = params;
        const { data } = await context.$magento.api.productReview(input);
        Logger.debug('[Result]:', { data });
        return (_b = (_a = data === null || data === void 0 ? void 0 : data.products) === null || _a === void 0 ? void 0 : _a.items) !== null && _b !== void 0 ? _b : [];
    },
    addReview: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento] add review params input:', JSON.stringify(params, null, 2));
        const { customQuery, ...input } = params;
        const { data } = await context.$magento.api.createProductReview(input);
        Logger.debug('[Result]:', { data });
        return (_b = (_a = data === null || data === void 0 ? void 0 : data.createProductReview) === null || _a === void 0 ? void 0 : _a.review) !== null && _b !== void 0 ? _b : {};
    },
    loadReviewMetadata: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento] load review metadata');
        const { data } = await context.$magento.api.productReviewRatingsMetadata();
        Logger.debug('[Result]:', { data });
        return (_b = (_a = data === null || data === void 0 ? void 0 : data.productReviewRatingsMetadata) === null || _a === void 0 ? void 0 : _a.items) !== null && _b !== void 0 ? _b : [];
    },
    loadCustomerReviews: async (context, params) => {
        var _a;
        Logger.debug('[Magento] load customer review based on:', { params });
        const { data } = await context.$magento.api.customerProductReview(params);
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.customer) !== null && _a !== void 0 ? _a : {};
    },
};
var index$5 = useReviewFactory(factoryParams$8);

const factoryParams$7 = {
    provide() {
        return {
            useGetShippingMethods: useGetShippingMethods$1(),
            cart: useCart(),
        };
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context, { customQuery }) => {
        var _a, _b;
        Logger.debug('[Magento] loadShipping', { customQuery });
        if (!((_b = (_a = context.cart.cart) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.shipping_addresses)) {
            await context.cart.load({ customQuery });
        }
        return context.cart.cart.value.shipping_addresses[0];
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    save: async (context, params) => {
        Logger.debug('[Magento] save user shipping address', { params });
        const { id } = context.cart.cart.value;
        const { apartment, neighborhood, extra, customerAddressId, ...address } = params.shippingDetails;
        const shippingData = customerAddressId
            ? ({
                customer_address_id: customerAddressId,
            })
            : ({
                address: {
                    ...address,
                    street: [address.street, apartment, neighborhood, extra].filter(Boolean),
                },
            });
        const shippingAddressInput = {
            cart_id: id,
            shipping_addresses: [
                {
                    ...shippingData,
                },
            ],
        };
        const { data } = await context
            .$magento
            .api
            .setShippingAddressesOnCart(shippingAddressInput);
        Logger.debug('[Result]:', { data });
        context.useGetShippingMethods.setState(data
            .setShippingAddressesOnCart
            .cart
            .shipping_addresses[0]
            .available_shipping_methods);
        return data
            .setShippingAddressesOnCart
            .cart
            .shipping_addresses[0];
    },
};
var index$4 = useShippingFactory(factoryParams$7);

function useStoreFactory(factoryParams) {
    return function useStore(cacheId = '') {
        const ssrKey = cacheId || 'useStoreFactory';
        // @ts-ignore
        const stores = sharedRef([], `${ssrKey}-stores`);
        const loading = sharedRef(false, `${ssrKey}-loading`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams);
        const load = async (params) => {
            Logger.debug(`useStore/${ssrKey}/load`);
            loading.value = true;
            try {
                stores.value = await _factoryParams.load(params);
            }
            finally {
                loading.value = false;
            }
        };
        const change = async (store) => {
            loading.value = true;
            try {
                _factoryParams.change(store);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            load,
            change,
            stores: computed(() => stores.value),
            loading: computed(() => loading.value),
        };
    };
}

const factoryParams$6 = {
    provide() {
        return {
            cart: useCart(),
        };
    },
    load: async (context) => {
        const { data } = await context.$magento.api.availableStores();
        return data.availableStores || [];
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    change: (context, store) => {
        context.$magento.config.state.setStore(StoreConfigGetters.getCode(store));
        context.$magento.config.state.setCurrency(StoreConfigGetters.getCurrency(store));
        context.$magento.config.state.setLocale(StoreConfigGetters.getCode(store));
    },
};
const useStore = useStoreFactory(factoryParams$6);
var useStore$1 = useStore;

function useUpsellProductsFactory(factoryParams) {
    return function useUpsellProducts(id) {
        const products = sharedRef([], `useUpsellProducts-products-${id}`);
        const loading = sharedRef(false, `useUpsellProducts-loading-${id}`);
        const error = sharedRef({
            search: null,
        }, `useUpsellProducts-error-${id}`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams, {
            mainRef: products, alias: 'useUpsellProducts-currentProducts', loading, error,
        });
        const search = async (searchParams) => {
            Logger.debug(`useUpsellProducts/${id}/search`, searchParams);
            try {
                loading.value = true;
                products.value = await _factoryParams.productsSearch(searchParams);
                error.value.search = null;
            }
            catch (err) {
                error.value.search = err;
                Logger.error(`useUpsellProducts/${id}/search`, err);
            }
            finally {
                loading.value = false;
            }
        };
        return {
            search,
            products: computed(() => products.value),
            loading: computed(() => loading.value),
            error: computed(() => error.value),
        };
    };
}

const factoryParams$5 = {
    productsSearch: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento] Find upsell products based on ', { params });
        const { customQuery, ...searchParams } = {
            ...params,
        };
        const { data } = await context
            .$magento
            .api
            .upsellProduct(searchParams);
        Logger.debug('[Result]:', { data });
        return (_b = (_a = data.products) === null || _a === void 0 ? void 0 : _a.items[0]) === null || _b === void 0 ? void 0 : _b.upsell_products;
    },
};
const useUpsellProducts = useUpsellProductsFactory(factoryParams$5);
var useUpsellProducts$1 = useUpsellProducts;

const useUrlResolverFactory = (factoryParams) => function useRouter(ssrKey = 'useRouter') {
    // @ts-ignore
    const result = sharedRef({}, `${ssrKey}-result`);
    const loading = sharedRef(false, `${ssrKey}-loading`);
    const error = sharedRef({
        search: null,
    }, `${ssrKey}-error`);
    // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
    const _factoryParams = configureFactoryParams(factoryParams);
    // eslint-disable-next-line consistent-return
    const search = async (params) => {
        Logger.debug(`useRouter/${ssrKey}/search`);
        loading.value = true;
        try {
            const data = await _factoryParams.search(params);
            result.value = data;
            return data;
        }
        catch (err) {
            error.value.search = err;
            Logger.error(`useRouter/${ssrKey}/search`, err);
        }
        finally {
            loading.value = false;
        }
    };
    return {
        search,
        result: computed(() => result.value),
        loading: computed(() => loading.value),
        error: computed(() => error.value),
    };
};

const factoryParams$4 = {
    search: async (context, params) => {
        Logger.debug('[Magento] Find information based on URL', { params });
        const clearUrl = params.url.replace(/[a-z]+\/[cp|]\//gi, '');
        const { data } = await context.$magento.api.urlResolver(clearUrl);
        Logger.debug('[Result]:', { data });
        return data.urlResolver;
    },
};
const useUrlResolver = useUrlResolverFactory(factoryParams$4);
var useUrlResolver$1 = useUrlResolver;

const factoryParams$3 = {
    provide() {
        return {
            user: useUser(),
        };
    },
    addAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento]: add billing address', { params });
        const { data } = await context.$magento.api.createCustomerAddress(transformUserCreateAddressInput(params));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.createCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    deleteAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento] delete billing address', { params });
        const { data } = await context.$magento.api.deleteCustomerAddress(params.address.id);
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.deleteCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    updateAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento] update billing address', { params });
        const { data } = await context.$magento.api.updateCustomerAddress(transformUserUpdateAddressInput(params));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.updateCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context, _params) => {
        var _a, _b, _c;
        Logger.debug('[Magento] load user address');
        if (!((_b = (_a = context.user.user) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.id)) {
            await context.user.load();
        }
        return (_c = context.user.user) === null || _c === void 0 ? void 0 : _c.value;
    },
    setDefaultAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento] setDefaultAddress');
        const { data } = await context.$magento.api.updateCustomerAddress(transformUserUpdateAddressInput(params));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.updateCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
};
var index$3 = useUserBillingFactory(factoryParams$3);

/* istanbul ignore file */
const factoryParams$2 = {
    provide() {
        return {
            user: useUser(),
        };
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    searchOrders: async (context, params) => {
        var _a, _b, _c, _d;
        Logger.debug('[Magento] search user orders', { params });
        if (!((_b = (_a = context.user.user) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.id)) {
            await context.user.load();
        }
        const { data } = await context.$magento.api.customerOrders(params);
        Logger.debug('[Result]:', { data });
        return (_d = (_c = data === null || data === void 0 ? void 0 : data.customer) === null || _c === void 0 ? void 0 : _c.orders) !== null && _d !== void 0 ? _d : {};
    },
};
var index$2 = useUserOrderFactory(factoryParams$2);

const factoryParams$1 = {
    provide() {
        return {
            user: useUser(),
        };
    },
    addAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento]: add shipping address', { params });
        const { data } = await context.$magento.api.createCustomerAddress(transformUserCreateAddressInput(params));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.createCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    deleteAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento] delete shipping address', { params });
        const { data } = await context.$magento.api.deleteCustomerAddress(params.address.id);
        return (_a = data === null || data === void 0 ? void 0 : data.deleteCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    updateAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento] update shipping address', { params });
        const { data } = await context.$magento.api.updateCustomerAddress(transformUserUpdateAddressInput(params));
        return (_a = data === null || data === void 0 ? void 0 : data.updateCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: async (context, _params) => {
        var _a, _b, _c;
        Logger.debug('[Magento] load user address');
        if (!((_b = (_a = context.user.user) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.id)) {
            await context.user.load();
        }
        return (_c = context.user.user) === null || _c === void 0 ? void 0 : _c.value;
    },
    setDefaultAddress: async (context, params) => {
        var _a;
        Logger.debug('[Magento] set default shipping address');
        const { data } = await context.$magento.api.updateCustomerAddress(transformUserUpdateAddressInput(params));
        Logger.debug('[Result]:', { data });
        return (_a = data === null || data === void 0 ? void 0 : data.updateCustomerAddress) !== null && _a !== void 0 ? _a : {};
    },
};
var index$1 = useUserShippingFactory(factoryParams$1);

const compareWishlistProduct = (productA, productB) => {
    const equalSku = (productA === null || productA === void 0 ? void 0 : productA.sku) === (productB === null || productB === void 0 ? void 0 : productB.sku);
    const equalUid = (productA === null || productA === void 0 ? void 0 : productA.uid) === (productB === null || productB === void 0 ? void 0 : productB.uid);
    return equalSku && equalUid;
};

const findItemOnWishlist = (currentWishlist, product) => {
    var _a, _b;
    const wishlist = Array.isArray(currentWishlist) ? currentWishlist[0] : currentWishlist;
    return (_b = (_a = wishlist === null || wishlist === void 0 ? void 0 : wishlist.items_v2) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.find((item) => compareWishlistProduct(item.product, product));
};

const useWishlistFactory = (factoryParams) => {
    const calculateWishlistTotal = (wishlists) => wishlists.reduce((prev, next) => { var _a, _b; return ((_a = prev === null || prev === void 0 ? void 0 : prev.items_count) !== null && _a !== void 0 ? _a : 0) + ((_b = next === null || next === void 0 ? void 0 : next.items_count) !== null && _b !== void 0 ? _b : 0); }, 0);
    const useWishlist = (ssrKey = 'useWishlistFactory') => {
        const loading = sharedRef(false, `useWishlist-loading-${ssrKey}`);
        const wishlist = sharedRef(null, `useWishlist-wishlist-${ssrKey}`);
        const itemsCount = sharedRef(0, `useWishlist-itemsCount-${ssrKey}`);
        const error = sharedRef({
            addItem: null,
            removeItem: null,
            load: null,
            loadItemsCount: null,
            clear: null,
        }, `useWishlist-error-${ssrKey}`);
        // eslint-disable-next-line @typescript-eslint/naming-convention,no-underscore-dangle
        const _factoryParams = configureFactoryParams(factoryParams, {
            mainRef: wishlist,
            alias: 'currentWishlist',
            loading,
            error,
        });
        const setWishlist = (newWishlist) => {
            wishlist.value = newWishlist;
            itemsCount.value = newWishlist[0].items_count;
            Logger.debug(`useWishlistFactory/${ssrKey}/setWishlist`, newWishlist);
        };
        const addItem = async ({ product, customQuery }) => {
            Logger.debug(`useWishlist/${ssrKey}/addItem`, product);
            try {
                loading.value = true;
                const updatedWishlist = await _factoryParams.addItem({
                    currentWishlist: wishlist.value,
                    product,
                    customQuery,
                });
                error.value.addItem = null;
                wishlist.value = updatedWishlist;
                itemsCount.value = updatedWishlist.items_count;
            }
            catch (err) {
                error.value.addItem = err;
                Logger.error(`useWishlist/${ssrKey}/addItem`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const removeItem = async ({ product, customQuery }) => {
            Logger.debug(`useWishlist/${ssrKey}/removeItem`, product);
            try {
                loading.value = true;
                const updatedWishlist = await _factoryParams.removeItem({
                    currentWishlist: wishlist.value,
                    product,
                    customQuery,
                });
                error.value.removeItem = null;
                wishlist.value = updatedWishlist;
                itemsCount.value = updatedWishlist.items_count;
            }
            catch (err) {
                error.value.removeItem = err;
                Logger.error(`useWishlist/${ssrKey}/removeItem`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const load = async (params) => {
            Logger.debug(`useWishlist/${ssrKey}/load`);
            try {
                loading.value = true;
                const loadedWishlist = await _factoryParams.load(params);
                wishlist.value = loadedWishlist;
                itemsCount.value = calculateWishlistTotal(loadedWishlist);
                error.value.load = null;
            }
            catch (err) {
                error.value.load = err;
                Logger.error(`useWishlist/${ssrKey}/load`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const loadItemsCount = async (params) => {
            Logger.debug(`useWishlist/${ssrKey}/loadItemsCount`);
            try {
                const loadedWishlist = await _factoryParams.loadItemsCount(params);
                itemsCount.value = calculateWishlistTotal(loadedWishlist);
                error.value.loadItemsCount = null;
            }
            catch (err) {
                error.value.loadItemsCount = err;
                Logger.error(`useWishlist/${ssrKey}/loadItemsCount`, err);
            }
        };
        const clear = async () => {
            Logger.debug(`useWishlist/${ssrKey}/clear`);
            try {
                loading.value = true;
                const updatedWishlist = await _factoryParams.clear({
                    currentWishlist: wishlist.value,
                });
                error.value.clear = null;
                wishlist.value = updatedWishlist;
                itemsCount.value = 0;
            }
            catch (err) {
                error.value.clear = err;
                Logger.error(`useWishlist/${ssrKey}/clear`, err);
            }
            finally {
                loading.value = false;
            }
        };
        const isInWishlist = ({ product }) => {
            Logger.debug(`useWishlist/${ssrKey}/isInWishlist`, product);
            return _factoryParams.isInWishlist({
                currentWishlist: wishlist.value,
                product,
            });
        };
        return {
            api: _factoryParams.api,
            wishlist,
            itemsCount,
            isInWishlist,
            addItem,
            load,
            loadItemsCount,
            removeItem,
            clear,
            setWishlist,
            loading,
            error,
        };
    };
    return useWishlist;
};

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/require-await */
// @ts-ignore
const factoryParams = {
    provide() {
        return {
            user: useUser(),
        };
    },
    // @ts-ignore
    load: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento Storefront]: useWishlist.load params->', params);
        const apiState = context.$magento.config.state;
        if (apiState.getCustomerToken()) {
            const { data } = await context.$magento.api.wishlist(params === null || params === void 0 ? void 0 : params.searchParams);
            Logger.debug('[Result]:', { data });
            return (_b = (_a = data === null || data === void 0 ? void 0 : data.customer) === null || _a === void 0 ? void 0 : _a.wishlists) !== null && _b !== void 0 ? _b : [];
        }
        return [];
    },
    loadItemsCount: async (context, params) => {
        var _a, _b;
        Logger.debug('[Magento Storefront]: useWishlist.wishlistItemsCount params->', params);
        const apiState = context.$magento.config.state;
        if (apiState.getCustomerToken()) {
            const { data } = await context.$magento.api.wishlistItemsCount();
            Logger.debug('[Result]:', { data });
            return (_b = (_a = data === null || data === void 0 ? void 0 : data.customer) === null || _a === void 0 ? void 0 : _a.wishlists) !== null && _b !== void 0 ? _b : [];
        }
        return [];
    },
    addItem: async (context, params) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { currentWishlist, product, } = params;
        Logger.debug('[Magento Storefront]: useWishlist.addItem params->', params);
        if (!currentWishlist)
            await factoryParams.load(context, {});
        const itemOnWishlist = findItemOnWishlist(currentWishlist, params.product);
        if (itemOnWishlist) {
            return factoryParams.removeItem(context, {
                product,
                currentWishlist,
            });
        }
        if (!context.user.isAuthenticated.value) {
            throw new Error('Need to be authenticated to add a product to wishlist');
        }
        // @ts-ignore
        // eslint-disable-next-line no-underscore-dangle
        switch (product.__typename) {
            case 'VirtualProduct':
            case 'DownloadableProduct':
            case 'GroupedProduct':
            case 'GiftCard':
            case 'SimpleProduct':
                const { data } = await context.$magento.api.addProductToWishList({
                    id: '0',
                    items: [{
                            sku: product.sku,
                            quantity: 1,
                        }],
                });
                Logger.debug('[Result]:', { data });
                return (_b = (_a = data === null || data === void 0 ? void 0 : data.addProductsToWishlist) === null || _a === void 0 ? void 0 : _a.wishlist) !== null && _b !== void 0 ? _b : {};
            case 'ConfigurableProduct':
                const { data: configurableProductData } = await context.$magento.api.addProductToWishList({
                    id: '0',
                    items: [{
                            sku: ((_d = (_c = product.configurable_product_options_selection) === null || _c === void 0 ? void 0 : _c.variant) === null || _d === void 0 ? void 0 : _d.sku) || product.sku,
                            quantity: 1,
                            parent_sku: product.sku,
                        }],
                });
                Logger.debug('[Result]:', { data: configurableProductData });
                return (_f = (_e = configurableProductData === null || configurableProductData === void 0 ? void 0 : configurableProductData.addProductsToWishlist) === null || _e === void 0 ? void 0 : _e.wishlist) !== null && _f !== void 0 ? _f : {};
            case 'BundleProduct':
                const { data: bundleProductData } = await context.$magento.api.addProductToWishList({
                    id: '0',
                    items: [{
                            sku: product.sku,
                            quantity: 1,
                            entered_options: product.bundle_options ? [...product.bundle_options] : [],
                        }],
                });
                Logger.debug('[Result]:', { data: bundleProductData });
                return (_h = (_g = bundleProductData === null || bundleProductData === void 0 ? void 0 : bundleProductData.addProductsToWishlist) === null || _g === void 0 ? void 0 : _g.wishlist) !== null && _h !== void 0 ? _h : {};
            default:
                // todo implement other options
                // @ts-ignore
                // eslint-disable-next-line no-underscore-dangle
                throw new Error(`Product Type ${product.__typename} not supported in add to wishlist yet`);
        }
    },
    removeItem: async (context, params) => {
        var _a, _b;
        const { product, currentWishlist, } = params;
        Logger.debug('[Magento Storefront]: useWishlist.removeItem params->', params);
        const itemOnWishlist = findItemOnWishlist(currentWishlist, params.product);
        const { data } = await context.$magento.api.removeProductsFromWishlist({
            id: '0',
            items: [itemOnWishlist.id],
        });
        Logger.debug('[Result]:', { data });
        return (_b = (_a = data === null || data === void 0 ? void 0 : data.removeProductsFromWishlist) === null || _a === void 0 ? void 0 : _a.wishlist) !== null && _b !== void 0 ? _b : {};
    },
    clear: async ({ currentWishlist }) => ({}),
    isInWishlist: (context, params) => {
        const { currentWishlist, product, } = params;
        const wishlistProduct = findItemOnWishlist(currentWishlist, product);
        return !!((wishlistProduct === null || wishlistProduct === void 0 ? void 0 : wishlistProduct.id) && (wishlistProduct === null || wishlistProduct === void 0 ? void 0 : wishlistProduct.quantity));
    },
};
var index = useWishlistFactory(factoryParams);

/* istanbul ignore file */
track('VSFMagento');

export { addressGetter, cartGetters$1 as cartGetters, categoryGetters$1 as categoryGetters, checkoutGetters$1 as checkoutGetters, extendScopeContext, facetGetters$1 as facetGetters, forgotPasswordGetters$1 as forgotPasswordGetters, orderGetters$1 as orderGetters, productGetters$1 as productGetters, reviewGetters$1 as reviewGetters, StoreConfigGetters as storeConfigGetters, storeGetters$1 as storeGetters, index$g as useAddresses, index$f as useBilling, useCart, index$e as useCategory, useCategorySearch$1 as useCategorySearch, useConfig$1 as useConfig, index$d as useContent, useCountrySearch$1 as useCountrySearch, useCurrency$1 as useCurrency, index$c as useCustomMutation, index$b as useCustomQuery, index$a as useExternalCheckout, index$9 as useFacet, useForgotPassword$1 as useForgotPassword, useGetShippingMethods$1 as useGetShippingMethods, index$8 as useGuestUser, useMakeOrder$1 as useMakeOrder, index$7 as useNewsletter, index$6 as usePaymentProvider, useProduct$1 as useProduct, useRelatedProducts$1 as useRelatedProducts, index$5 as useReview, index$4 as useShipping, useShippingProvider, useStore$1 as useStore, useUpsellProducts$1 as useUpsellProducts, useUrlResolver$1 as useUrlResolver, useUser, index$3 as useUserBilling, index$2 as useUserOrder, index$1 as useUserShipping, index as useWishlist, userAddressesGetters$1 as userAddressesGetters, userBillingGetters$1 as userBillingGetters, userGetters$1 as userGetters, userShippingGetters$1 as userShippingGetters, wishlistGetters$1 as wishlistGetters };
//# sourceMappingURL=index.es.js.map
