import { AgnosticAttribute, AgnosticBreadcrumb, AgnosticMediaGalleryItem, AgnosticPrice, ProductGetters as ProductGettersBase } from '@vue-storefront/core';
import { BundleProduct, Category, GroupedProduct, Product } from '@vue-storefront/magento-api';
declare type ProductVariantFilters = any;
export declare const getName: (product: Product) => string;
export declare const getSlug: (product: Product, category?: Category) => string;
export declare const getPrice: (product: Product) => AgnosticPrice;
export declare const getGallery: (product: Product) => AgnosticMediaGalleryItem[];
export declare const getCoverImage: (product: Product) => string;
export declare const getProductThumbnailImage: (product: Product) => string;
export declare const getFiltered: (products: Product[], filters?: ProductVariantFilters | any) => Product[];
export declare const getAttributes: (products: Product, _filterByAttributeName?: string[]) => Record<string, AgnosticAttribute | string>;
export declare const getDescription: (product: Product) => string;
export declare const getShortDescription: (product: Product) => string;
export declare const getCategoryIds: (product: Product) => string[];
export declare const getCategory: (product: any, currentUrlPath: string) => Category | null;
export declare const getId: (product: Product) => string;
export declare const getProductSku: (product: Product) => string;
export declare const getTypeId: (product: Product) => string;
export declare const getFormattedPrice: (price: number) => string;
export declare const getBreadcrumbs: (product: any, category?: Category) => AgnosticBreadcrumb[];
export declare const getTotalReviews: (review: {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
}) => number;
export declare const getAverageRating: (review: {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
} | {
    review_count: number;
    reviews: {
        items: {
            average_rating: number;
            nickname: string;
            summary: string;
            text: string;
            created_at: string;
            ratings_breakdown: {
                name: string;
                value: string;
            }[];
            product: {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            } | {
                name?: string;
                uid: string;
            };
        }[];
        page_info: {
            current_page?: number;
            page_size?: number;
            total_pages?: number;
        };
    };
}) => number;
export declare const getProductRelatedProduct: (product: any) => Product[];
export declare const getProductUpsellProduct: (product: any) => Product[];
export declare const getSwatchData: (swatchData: Product['configurable_options'][0]['values'][0]['swatch_data']) => string | undefined;
export declare const getGroupedProducts: (product: GroupedProduct & {
    __typename: string;
}) => GroupedProduct['items'] | undefined;
export declare const getBundleProducts: (product: BundleProduct & {
    __typename: string;
}) => BundleProduct['items'] | undefined;
export interface ProductGetters extends ProductGettersBase<Product, ProductVariantFilters> {
    getCategory(product: Product, currentUrlPath: string): Category | null;
    getProductRelatedProduct(product: Product): Product[];
    getProductSku(product: Product): string;
    getProductThumbnailImage(product: Product): string;
    getProductUpsellProduct(product: Product): Product[];
    getShortDescription(product: Product): string;
    getSlug(product: Product, category?: Category): string;
    getTypeId(product: Product): string;
    getSwatchData(swatchData: Product['configurable_options'][0]['values'][0]['swatch_data']): string | undefined;
    getGroupedProducts(product: GroupedProduct): GroupedProduct['items'] | undefined;
    getBundleProducts(product: BundleProduct): BundleProduct['items'] | undefined;
}
declare const productGetters: ProductGetters;
export default productGetters;
//# sourceMappingURL=productGetters.d.ts.map