import { CartGetters as CartGettersBase, AgnosticPrice, AgnosticTotals, AgnosticAttribute, AgnosticCoupon, AgnosticDiscount } from '@vue-storefront/core';
import { Cart, CartItem, Product, SelectedShippingMethod, ConfigurableCartItem, ProductInterface } from '@vue-storefront/magento-api';
import { AgnosticPaymentMethod } from '../types';
export declare const getItems: (cart: Cart) => CartItem[];
export declare const getItemName: (product: CartItem) => string;
export declare const getSlug: (product: CartItem) => string;
export declare const getItemImage: (product: CartItem) => string;
export declare const getItemPrice: (product: CartItem) => AgnosticPrice;
export declare const productHasSpecialPrice: (product: CartItem) => boolean;
export declare const getItemQty: (product: CartItem) => number;
export declare const getItemAttributes: ({ product }: import("@vue-storefront/magento-api").CartItemInterface & {
    product: Product;
}, _filterByAttributeName?: Array<string>) => Record<string, AgnosticAttribute | string>;
export declare const getItemSku: (product: CartItem) => string;
export declare const getTotals: (cart: Cart) => AgnosticTotals;
export declare const getShippingPrice: (cart: Cart) => number;
export declare const getTotalItems: (cart: Cart) => number;
export declare const getConfiguredVariant: (product: ConfigurableCartItem) => ProductInterface | {};
export declare const getFormattedPrice: (price: number) => string;
export declare const getCoupons: (cart: Cart) => AgnosticCoupon[];
export declare const getDiscounts: (cart: Cart) => AgnosticDiscount[];
export declare const getAppliedCoupon: (cart: Cart) => AgnosticCoupon | null;
export declare const getSelectedShippingMethod: (cart: Cart) => SelectedShippingMethod | null;
export declare const getAvailablePaymentMethods: (cart: Cart) => AgnosticPaymentMethod[];
export declare const getStockStatus: (product: CartItem) => string;
export interface CartGetters extends CartGettersBase<Cart, CartItem> {
    getAppliedCoupon(cart: Cart): AgnosticCoupon | null;
    getAvailablePaymentMethods(cart: Cart): AgnosticPaymentMethod[];
    getSelectedShippingMethod(cart: Cart): SelectedShippingMethod | null;
    productHasSpecialPrice(product: CartItem): boolean;
    getStockStatus(product: CartItem): string;
}
declare const cartGetters: CartGetters;
export default cartGetters;
//# sourceMappingURL=cartGetters.d.ts.map