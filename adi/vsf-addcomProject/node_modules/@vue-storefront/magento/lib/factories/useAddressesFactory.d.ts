import { Context, CustomQuery, FactoryParams } from '@vue-storefront/core';
import { ComposableFunctionArgs, PlatformApi } from '@vue-storefront/core/lib/src/types';
import { CustomQueryParams, UseAddresses } from '../types/composables';
export interface UseAddressesParams<ADDRESS, LOAD_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
} = CustomQueryParams, SAVE_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
} = CustomQueryParams, UPDATE_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
} = CustomQueryParams, REMOVE_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
} = CustomQueryParams, API extends PlatformApi = any> extends FactoryParams<API> {
    load: (context: Context, params?: ComposableFunctionArgs<LOAD_ADDRESS_PARAMS>) => Promise<ADDRESS[]>;
    save: (context: Context, params: ComposableFunctionArgs<SAVE_ADDRESS_PARAMS>) => Promise<ADDRESS>;
    update: (context: Context, params: ComposableFunctionArgs<UPDATE_ADDRESS_PARAMS>) => Promise<ADDRESS>;
    remove: (context: Context, params: ComposableFunctionArgs<REMOVE_ADDRESS_PARAMS>) => Promise<boolean>;
}
export declare const useAddressesFactory: <ADDRESS, LOAD_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
}, SAVE_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
}, UPDATE_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
}, REMOVE_ADDRESS_PARAMS extends {
    customQuery?: CustomQuery;
}, API extends PlatformApi = any>(factoryParams: UseAddressesParams<ADDRESS, LOAD_ADDRESS_PARAMS, SAVE_ADDRESS_PARAMS, UPDATE_ADDRESS_PARAMS, REMOVE_ADDRESS_PARAMS, API>) => () => UseAddresses<ADDRESS, LOAD_ADDRESS_PARAMS, SAVE_ADDRESS_PARAMS, UPDATE_ADDRESS_PARAMS, REMOVE_ADDRESS_PARAMS, API>;
//# sourceMappingURL=useAddressesFactory.d.ts.map