import { UseCart as UseCartCore, Context, FactoryParams, UseCartErrors as UseCartErrorsCore, PlatformApi, ComposableFunctionArgs } from '@vue-storefront/core';
import { ComputedProperty, CustomQuery } from '@vue-storefront/core/lib/src/types';
export interface UseCartFactoryParams<CART, CART_ITEM, PRODUCT, API extends PlatformApi = any> extends FactoryParams<API> {
    load: (context: Context, params: ComposableFunctionArgs<{
        realCart?: boolean;
    }>) => Promise<CART>;
    loadTotalQty: (context: Context) => Promise<number>;
    addItem: (context: Context, params: ComposableFunctionArgs<{
        currentCart: CART;
        product: PRODUCT;
        quantity: any;
    }>) => Promise<CART>;
    removeItem: (context: Context, params: ComposableFunctionArgs<{
        currentCart: CART;
        product: CART_ITEM;
    }>) => Promise<CART>;
    updateItemQty: (context: Context, params: ComposableFunctionArgs<{
        currentCart: CART;
        product: CART_ITEM;
        quantity: number;
    }>) => Promise<CART>;
    clear: (context: Context, params: {
        currentCart: CART;
    }) => Promise<CART>;
    applyCoupon: (context: Context, params: ComposableFunctionArgs<{
        currentCart: CART;
        couponCode: string;
    }>) => Promise<{
        updatedCart: CART;
    }>;
    removeCoupon: (context: Context, params: ComposableFunctionArgs<{
        currentCart: CART;
        couponCode: string;
    }>) => Promise<{
        updatedCart: CART;
    }>;
    isInCart: (context: Context, params: {
        currentCart: CART;
        product: PRODUCT;
    }) => boolean;
}
export interface UseCart<CART, CART_ITEM, PRODUCT, API extends PlatformApi = any> extends UseCartCore<CART, CART_ITEM, PRODUCT, API> {
    totalQuantity: ComputedProperty<number>;
    loadTotalQty(params: {
        customQuery?: CustomQuery;
    }): Promise<void>;
}
export interface UseCartErrors extends UseCartErrorsCore {
    loadTotalQty: Error;
}
export declare const useCartFactory: <CART, CART_ITEM, PRODUCT, API extends PlatformApi = any>(factoryParams: UseCartFactoryParams<CART, CART_ITEM, PRODUCT, API>) => () => UseCart<CART, CART_ITEM, PRODUCT, API>;
//# sourceMappingURL=useCartFactory.d.ts.map