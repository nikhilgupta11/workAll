import { Context, FactoryParams, ComposableFunctionArgs } from '@vue-storefront/core';
import { PlatformApi } from '@vue-storefront/core/lib/src/types';
import { UseCurrency } from '../types/composables';
export interface UseCurrencyFactoryParams<CURRENCY, API extends PlatformApi = any> extends FactoryParams<API> {
    load: (context: Context, params?: ComposableFunctionArgs<{}>) => Promise<CURRENCY>;
    change: (context: Context, params: ComposableFunctionArgs<{
        id: string;
    }>) => void;
}
export declare function useCurrencyFactory<CURRENCY, API extends PlatformApi = any>(factoryParams: UseCurrencyFactoryParams<CURRENCY, API>): (cacheId?: string) => UseCurrency<CURRENCY, API>;
//# sourceMappingURL=useCurrencyFactory.d.ts.map