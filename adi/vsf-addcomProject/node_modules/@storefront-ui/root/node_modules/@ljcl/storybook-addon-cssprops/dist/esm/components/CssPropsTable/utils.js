var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { ADDON_ID } from "../../constants";
function getLocalStorage(key) {
    try {
        if (window.localStorage) {
            var localStorage_1 = window.localStorage.getItem(key);
            if (localStorage_1) {
                var parsedStorage = JSON.parse(localStorage_1);
                return parsedStorage;
            }
            return {};
        }
    }
    catch (e) {
        console.warn("[storybook-addon-cssprops]", "Couldn't fetch localStorage");
    }
    return {};
}
function setLocalStorage(key, data) {
    try {
        if (data && window.localStorage) {
            window.localStorage.setItem(key, JSON.stringify(data));
        }
    }
    catch (e) {
        return undefined;
    }
}
export var updateStorage = function (cssProps) {
    var propertiesFromStorage = getLocalStorage(ADDON_ID);
    var newProperties = {};
    Object.keys(cssProps).forEach(function (key) {
        newProperties[key] = cssProps[key];
    });
    var newStorage = __assign(__assign({}, propertiesFromStorage), newProperties);
    setLocalStorage(ADDON_ID, newStorage);
    return newStorage;
};
export var resetStorage = function (cssPropNames) {
    var newProperties = getLocalStorage(ADDON_ID);
    if (cssPropNames) {
        cssPropNames.forEach(function (cssPropName) {
            if (cssPropName in newProperties) {
                delete newProperties[cssPropName];
            }
        });
    }
    else {
        newProperties = {};
    }
    setLocalStorage(ADDON_ID, newProperties);
    return newProperties;
};
function mergeCustomPropertiesWithStorage(fromParams, fromStorage) {
    if (fromParams === void 0) { fromParams = {}; }
    if (fromStorage === void 0) { fromStorage = getLocalStorage(ADDON_ID); }
    var mergedParams = __assign({}, fromParams);
    Object.keys(mergedParams).forEach(function (paramName) {
        var localValue = fromStorage[paramName];
        if (localValue) {
            mergedParams[paramName].value = localValue;
        }
    });
    return mergedParams;
}
export { getLocalStorage, setLocalStorage, mergeCustomPropertiesWithStorage };
