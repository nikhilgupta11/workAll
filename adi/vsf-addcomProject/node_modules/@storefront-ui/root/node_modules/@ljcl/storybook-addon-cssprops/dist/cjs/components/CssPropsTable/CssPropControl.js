"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CssPropControl = void 0;
var React = require("react");
var components_1 = require("@storybook/components");
var NoControl = function () { return React.createElement(React.Fragment, { key: "none" }, "-"); };
var CssPropControl = function (_a) {
    var row = _a.row, presetColors = _a.presetColors, updateStorage = _a.updateStorage;
    var name = row.name, _b = row.control, control = _b === void 0 ? "color" : _b, value = row.value;
    var _c = React.useState(false), isFocused = _c[0], setFocused = _c[1];
    var _d = React.useState({ value: value }), boxedValue = _d[0], setBoxedValue = _d[1];
    var onChange = React.useCallback(function (cssPropVal) {
        var _a;
        setBoxedValue({ value: cssPropVal });
        updateStorage((_a = {}, _a[name] = cssPropVal, _a));
        return cssPropVal;
    }, [updateStorage, name]);
    React.useEffect(function () {
        if (!isFocused) {
            setBoxedValue({ value: value });
        }
    }, [row]);
    var onBlur = React.useCallback(function () { return setFocused(false); }, []);
    var onFocus = React.useCallback(function () { return setFocused(true); }, []);
    if (!control)
        return React.createElement(NoControl, null);
    var props = {
        name: name,
        value: boxedValue.value,
        onChange: onChange,
        onBlur: onBlur,
        onFocus: onFocus,
    };
    switch (control) {
        case "color":
            return React.createElement(components_1.ColorControl, __assign({}, props, { presetColors: presetColors }));
        case "text":
            return React.createElement(components_1.TextControl, __assign({}, props));
        default:
            return React.createElement(NoControl, null);
    }
};
exports.CssPropControl = CssPropControl;
