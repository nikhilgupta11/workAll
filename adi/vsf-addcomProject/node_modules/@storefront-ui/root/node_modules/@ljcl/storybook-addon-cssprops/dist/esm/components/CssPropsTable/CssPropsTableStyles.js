var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { styled, ignoreSsrWarning } from "@storybook/theming";
import { opacify, transparentize, darken, lighten } from "polished";
export var TableWrapper = styled.table(function (_a) {
    var _b, _c, _d, _e;
    var theme = _a.theme, inAddonPanel = _a.inAddonPanel;
    return ({
        "&&": (_b = {
                borderCollapse: "collapse",
                borderSpacing: 0,
                color: theme.color.defaultText,
                "td, th": {
                    padding: 0,
                    border: "none",
                    textOverflow: "ellipsis",
                },
                fontSize: theme.typography.size.s2 - 1,
                lineHeight: "20px",
                textAlign: "left",
                width: "100%",
                marginTop: inAddonPanel ? 0 : 25,
                marginBottom: inAddonPanel ? 0 : 40,
                "thead th:first-of-type, td:first-of-type": {
                    width: "25%",
                },
                "th:first-of-type, td:first-of-type": {
                    paddingLeft: 20,
                },
                "th:nth-of-type(2), td:nth-of-type(2)": {
                    width: "40%",
                },
                "th:last-of-type, td:last-of-type": {
                    paddingRight: 20,
                    width: "35%",
                },
                th: {
                    color: theme.base === "light"
                        ? transparentize(0.25, theme.color.defaultText)
                        : transparentize(0.45, theme.color.defaultText),
                    paddingTop: 10,
                    paddingBottom: 10,
                    paddingLeft: 15,
                    paddingRight: 15,
                },
                td: {
                    paddingTop: "10px",
                    paddingBottom: "10px",
                    "&:not(:first-of-type)": {
                        paddingLeft: 15,
                        paddingRight: 15,
                    },
                    "&:last-of-type": {
                        paddingRight: 20,
                    },
                },
                marginLeft: inAddonPanel ? 0 : 1,
                marginRight: inAddonPanel ? 0 : 1
            },
            _b["tr:first-child".concat(ignoreSsrWarning)] = (_c = {},
                _c["td:first-child".concat(ignoreSsrWarning, ", th:first-child").concat(ignoreSsrWarning)] = {
                    borderTopLeftRadius: inAddonPanel ? 0 : theme.appBorderRadius,
                },
                _c["td:last-child".concat(ignoreSsrWarning, ", th:last-child").concat(ignoreSsrWarning)] = {
                    borderTopRightRadius: inAddonPanel ? 0 : theme.appBorderRadius,
                },
                _c),
            _b["tr:last-child".concat(ignoreSsrWarning)] = (_d = {},
                _d["td:first-child".concat(ignoreSsrWarning, ", th:first-child").concat(ignoreSsrWarning)] = {
                    borderBottomLeftRadius: inAddonPanel ? 0 : theme.appBorderRadius,
                },
                _d["td:last-child".concat(ignoreSsrWarning, ", th:last-child").concat(ignoreSsrWarning)] = {
                    borderBottomRightRadius: inAddonPanel ? 0 : theme.appBorderRadius,
                },
                _d),
            _b.tbody = {
                boxShadow: !inAddonPanel &&
                    (theme.base === "light"
                        ? "rgba(0, 0, 0, 0.10) 0 1px 3px 1px,\n          ".concat(transparentize(0.035, theme.appBorderColor), " 0 0 0 1px")
                        : "rgba(0, 0, 0, 0.20) 0 2px 5px 1px,\n          ".concat(opacify(0.05, theme.appBorderColor), " 0 0 0 1px")),
                borderRadius: theme.appBorderRadius,
                "@media not all and (min-resolution:.001dpcm)": {
                    "@supports (-webkit-appearance:none)": {
                        borderWidth: 1,
                        borderStyle: "solid",
                        borderColor: !inAddonPanel &&
                            (theme.base === "light"
                                ? transparentize(0.035, theme.appBorderColor)
                                : opacify(0.05, theme.appBorderColor)),
                    },
                },
                tr: __assign({ background: "transparent", overflow: "hidden" }, (inAddonPanel
                    ? {
                        borderTopWidth: 1,
                        borderTopStyle: "solid",
                        borderTopColor: theme.base === "light"
                            ? darken(0.1, theme.background.content)
                            : lighten(0.05, theme.background.content),
                    }
                    : (_e = {},
                        _e["&:not(:first-child".concat(ignoreSsrWarning, ")")] = {
                            borderTopWidth: 1,
                            borderTopStyle: "solid",
                            borderTopColor: theme.base === "light"
                                ? darken(0.1, theme.background.content)
                                : lighten(0.05, theme.background.content),
                        },
                        _e))),
                td: {
                    background: theme.background.content,
                },
            },
            _b),
    });
});
export var ResetButton = styled.button(function (_a) {
    var theme = _a.theme;
    return ({
        border: 0,
        borderRadius: "3em",
        cursor: "pointer",
        display: "inline-block",
        overflow: "hidden",
        padding: "3px 8px",
        transition: "all 150ms ease-out",
        verticalAlign: "top",
        userSelect: "none",
        margin: 0,
        backgroundColor: theme.base === "light" ? "#EAF3FC" : theme.color.border,
        boxShadow: theme.base === "light"
            ? "".concat(theme.color.border, " 0 0 0 1px inset")
            : "".concat(theme.color.darker, "  0 0 0 1px inset"),
        color: theme.color.secondary,
        "&:hover": {
            background: theme.base === "light"
                ? darken(0.03, "#EAF3FC")
                : opacify(0.1, theme.color.border),
        },
        "&:focus": {
            boxShadow: "".concat(theme.color.secondary, " 0 0 0 1px inset"),
            outline: "none",
        },
        svg: {
            display: "block",
            height: 14,
            width: 14,
        },
    });
});
export var CssPropsHeadingWrapper = styled.span({
    display: "flex",
    justifyContent: "space-between",
});
