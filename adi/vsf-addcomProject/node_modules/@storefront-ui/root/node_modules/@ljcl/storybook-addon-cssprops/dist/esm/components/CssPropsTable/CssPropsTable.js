var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from "react";
import { Icons } from "@storybook/components";
import { useInjectCustomProperties } from "./InjectCssProps";
import { CssPropRow } from "./CssPropRow";
import { updateStorage, resetStorage, mergeCustomPropertiesWithStorage, } from "./utils";
import { ResetWrapper } from "../typography/DocumentFormatting";
import { TableWrapper, ResetButton, CssPropsHeadingWrapper, } from "./CssPropsTableStyles";
export var CssPropsTable = function (_a) {
    var _b = _a.customProperties, customProperties = _b === void 0 ? {} : _b, presetColors = _a.presetColors, inAddonPanel = _a.inAddonPanel;
    var _c = React.useState(mergeCustomPropertiesWithStorage(customProperties)), mergedCustomProperties = _c[0], setMergedCustomProperties = _c[1];
    var handleResetProps = function () {
        var customPropertyKeys = Object.keys(customProperties);
        resetStorage(customPropertyKeys);
        setMergedCustomProperties(customProperties);
    };
    var handleUpdateStorage = function (args) {
        var newStorage = updateStorage(args);
        setMergedCustomProperties(mergeCustomPropertiesWithStorage(mergedCustomProperties, newStorage));
    };
    React.useEffect(function () {
        setMergedCustomProperties(mergeCustomPropertiesWithStorage(customProperties));
    }, [customProperties]);
    useInjectCustomProperties(mergedCustomProperties);
    var common = {
        updateStorage: handleUpdateStorage,
        inAddonPanel: inAddonPanel,
        presetColors: presetColors,
    };
    return (React.createElement(ResetWrapper, null,
        React.createElement(TableWrapper, __assign({}, { inAddonPanel: inAddonPanel }),
            React.createElement("thead", null,
                React.createElement("tr", null,
                    React.createElement("th", null, "CSS Custom Property"),
                    React.createElement("th", null, "Description"),
                    React.createElement("th", null,
                        React.createElement(CssPropsHeadingWrapper, null,
                            "Value",
                            " ",
                            React.createElement(ResetButton, { onClick: handleResetProps, title: "Reset CSS Custom Props" },
                                React.createElement(Icons, { icon: "sync", "aria-hidden": true })))))),
            React.createElement("tbody", null, Object.keys(mergedCustomProperties).map(function (name) {
                var row = __assign(__assign({}, mergedCustomProperties[name]), { name: name });
                return React.createElement(CssPropRow, __assign({ key: name, row: row }, common));
            })))));
};
